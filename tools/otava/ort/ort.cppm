// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

export module ort;

import std;

export extern "C" void* ort_malloc(std::int64_t size);
export extern "C" void ort_free(void* ptr);
export extern "C" void* ort_open_file(const char* path, const char* mode);
export extern "C" int ort_close_file(void* stream);
export extern "C" int ort_fgetc(void* file);
export extern "C" int ort_fputc(int ch, void* file);
export extern "C" int ort_fputs(const char* str, void* file);
export extern "C" std::int64_t ort_fread(void* buffer, std::int64_t size, std::int64_t count, void* file);
export extern "C" std::int64_t ort_fwrite(void* buffer, std::int64_t size, std::int64_t count, void* file);
export extern "C" bool ort_isspace(int c);
export extern "C" bool ort_isalpha(int c);
export extern "C" bool ort_isdigit(int c);
export extern "C" int ort_tolower(int c);
export extern "C" int ort_toupper(int c);
export extern "C" int ort_fflush(void* file);
export extern "C" void ort_flush_handle(int handle);
export extern "C" int ort_feof(void* file);
export extern "C" int ort_ferror(void* file);
export extern "C" int ort_fseek(void* file, long offset, int origin);
export extern "C" long ort_ftell(void* file);
export extern "C" int ort_error_number();
export extern "C" char* ort_error_str(int errnum);
export extern "C" const char* ort_get_env(const char* env);
export extern "C" int ort_platform_string_to_utf16_string(const char* platformString, char16_t* buf, int bufSize);
export extern "C" int ort_utf16_string_to_platform_string(const char16_t* utf16String, char* buf, int bufSize);
export extern "C" void ort_set_rand_seed(std::uint64_t seed);
export extern "C" std::uint8_t ort_get_random_byte();
export extern "C" const char* ort_get_cwd(char* buf, int bufSize);
export extern "C" std::int64_t ort_current_time();
export extern "C" void ort_current_date(int& yyyy, int& month, int& day);
export extern "C" void ort_current_date_time(int& yyyy, int& month, int& day, int& seconds);
export extern "C" std::int64_t ort_make_time(int yyyy, int month, int day, int seconds);
export extern "C" std::int64_t ort_current_ms();
export extern "C" void* ort_get_std_output_handle();
export extern "C" void* ort_get_std_error_handle();
export extern "C" std::uint16_t ort_get_console_attrs(void* handle);
export extern "C" bool ort_set_console_text_attribute(void* handle, std::uint16_t attrs);
export extern "C" void* ort_load_library_as_data_file(const char16_t* moduleName);
export extern "C" void* ort_get_module_handle(const char16_t* moduleName);
export extern "C" std::uint32_t ort_get_last_windows_error();
export extern "C" std::uint32_t ort_get_last_socket_error();
export extern "C" void ort_get_windows_error_message(std::uint32_t error, char* buf, int bufSize);
export extern "C" void* ort_find_resource(void* moduleHandle, const char16_t* resourceName);
export extern "C" void* ort_load_resource(void* moduleHandle, void* resource);
export extern "C" std::uint8_t* ort_lock_resource(void* handle);
export extern "C" std::int64_t ort_size_of_resource(void* moduleHandle, void* resource);
export extern "C" void ort_set_std_handles_to_utf16_mode();
export extern "C" void ort_set_std_handles_to_narrow_mode();
export extern "C" bool ort_is_handle_redirected(int handle);
export extern "C" int ort_zlib_init(std::int32_t mode, int compressionLevel, void** handle);
export extern "C" void ort_zlib_done(std::int32_t mode, void* handle);
export extern "C" void ort_zlib_set_input(void* inChunk, uint32_t inAvail, void* handle);
export extern "C" int32_t ort_zlib_deflate(void* outChunk, uint32_t outChunkSize, uint32_t* have, uint32_t* outAvail, void* handle, int32_t flush);
export extern "C" int32_t ort_zlib_inflate(void* outChunk, uint32_t outChunkSize, uint32_t* have, uint32_t* outAvail, uint32_t* inAvail, void* handle);
export extern "C" const char* ort_zlib_retval_str(int32_t retVal);
export extern "C" void* ort_convert_thread_to_fiber(void* param);
export extern "C" void* ort_create_fiber(std::uint64_t stackSize, void* startAddress, void* param);
export extern "C" void ort_switch_to_fiber(void* fiber);
export extern "C" void* ort_get_fiber_data();
export extern "C" void ort_delete_fiber(void* fiber);
export extern "C" std::time_t ort_time(std::time_t* arg);
export extern "C" void* ort_localtime(const std::time_t* time);
export extern "C" std::time_t ort_mktime(void* time);
export extern "C" void ort_strftime(char* buffer, int bufSize, const char* format, void* time);
export extern "C" bool ort_init_sockets();
export extern "C" void ort_done_sockets();
export extern "C" std::int64_t ort_socket();
export extern "C" bool ort_bind_socket(std::int64_t socket, int port);
export extern "C" bool ort_listen_socket(std::int64_t socket, int backlog);
export extern "C" std::int64_t ort_accept_socket(std::int64_t socket);
export extern "C" bool ort_close_socket(std::int64_t socket);
export extern "C" bool ort_shutdown_socket(std::int64_t socket, int how);
export extern "C" std::int64_t ort_connect_socket(const char* node, const char* service);
export extern "C" int ort_send_socket(std::int64_t socket, const std::uint8_t* buf, int len, int flags);
export extern "C" int ort_recv_socket(std::int64_t socket, std::uint8_t* buf, int len, int flags);
export extern "C" bool ort_get_path_to_executable(char* buf, int bufSize);
export extern "C" double ort_pow(double x, int exponent);
export extern "C" void ort_exit(int exitCode);
