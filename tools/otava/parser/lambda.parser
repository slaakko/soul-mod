// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

export module otava.parser.lambda;

[interface]import otava.symbols.context;
[interface]import otava.ast;
[implementation]import soul.ast.source.pos;
[implementation]import soul.ast.lexer.pos.pair;
[implementation]import otava.token;
[implementation]import otava.lexer;
[implementation]import otava.parser.attribute;
[implementation]import otava.parser.concepts;
[implementation]import otava.parser.declaration;
[implementation]import otava.parser.function;
[implementation]import otava.parser.identifier;
[implementation]import otava.parser.initialization;
[implementation]import otava.parser.punctuation;
[implementation]import otava.parser.statement;
[implementation]import otava.parser.templates;

parser LambdaParser
{
    lexer otava::lexer::OtavaLexer<char32_t>;

    using AttributeParser.AttributeSpecifierSeq;
    using ConceptParser.RequiresClause;
    using DeclarationParser.DeclSpecifierSeq;
    using DeclarationParser.NoexceptSpecifier;
    using DeclarationParser.TrailingReturnType;
    using FunctionParser.ParameterDeclarationClause;
    using IdentifierParser.Identifier;
    using InitializationParser.Initializer;
    using PunctuationParser.Comma;
    using PunctuationParser.Ellipsis;
    using StatementParser.CompoundStatement;
    using TemplateParser.TemplateParameterList;
    
    LambdaExpression(otava::symbols::Context* context, var soul::ast::SourcePos sourcePos) : otava::ast::Node*
        ::= 
        (   LambdaIntroducer(context):introducer{ sourcePos = lexer.GetSourcePos(pos); }
            LambdaTemplateParams(context):templateParams?
            LambdaDeclarator(context):declarator
            CompoundStatement(context):body
        )
        {
            return new otava::ast::LambdaExpressionNode(sourcePos, introducer, templateParams, declarator, body);
        }
        ;

    LambdaIntroducer(otava::symbols::Context* context, var soul::ast::SourcePos sourcePos, var soul::ast::SourcePos lbPos, var soul::ast::SourcePos rbPos) : 
        otava::ast::Node*
        ::= 
        (
            LBRACKET{ sourcePos = lexer.GetSourcePos(pos); lbPos = sourcePos; }
            LambdaCapture(context):capture?
            RBRACKET{ rbPos = lexer.GetSourcePos(pos); }
        )
        {
            return new otava::ast::LambdaIntroducerNode(sourcePos, capture, lbPos, rbPos);
        }
        ;

    LambdaCapture(otava::symbols::Context* context, var soul::ast::SourcePos sourcePos, var std::unique_ptr<otava::ast::Node> node) : otava::ast::Node*
        ::= empty{ node.reset(new otava::ast::LambdaCaptureNode(lexer.GetSourcePos(pos))); }
        (   CaptureList(context, node.get()):captureList
        |   CaptureDefault:captureDefault{ node->AddNode(captureDefault); } 
            (
                Comma:comma{ node->AddNode(comma); } 
                CaptureList(context, node.get()):captureList2
            )?
        )
        {
            return node.release();
        }
        ;

    CaptureDefault : otava::ast::Node*
        ::= AMP{ return new otava::ast::DefaultRefCaptureNode(lexer.GetSourcePos(pos)); }
        |   ASSIGN{ return new otava::ast::DefaultCopyCaptureNode(lexer.GetSourcePos(pos)); }
        ;

    CaptureList(otava::symbols::Context* context, otava::ast::Node* container)
        ::= Capture(context):first{ container->AddNode(first); }
            (
                Comma:comma{ container->AddNode(comma); }
                Capture(context):next{ container->AddNode(next); }
            )*
        ;

    Capture(otava::symbols::Context* context) : otava::ast::Node*
        ::= InitCapture(context):initCapture{ return initCapture; }
        |   SimpleCapture(context):simpleCapture{ return simpleCapture; }
        ;

    InitCapture(otava::symbols::Context* context, var soul::ast::SourcePos sourcePos, var std::unique_ptr<otava::ast::Node> byRefCaptureNode) : otava::ast::Node*
        ::= 
        (
            (AMP{ sourcePos = lexer.GetSourcePos(pos); byRefCaptureNode.reset(new otava::ast::ByRefCaptureNode(sourcePos)); })? 
            (Ellipsis:ellipsis{ if (!sourcePos.IsValid()) sourcePos = lexer.GetSourcePos(pos); })? 
            Identifier(context):identifier{ if (!sourcePos.IsValid()) sourcePos = lexer.GetSourcePos(pos); }
            Initializer(context):initializer
        )
        {
            return new otava::ast::InitCaptureNode(sourcePos, identifier, initializer, byRefCaptureNode.release(), ellipsis);
        }
        ;

    SimpleCapture(otava::symbols::Context* context, var soul::ast::SourcePos sourcePos, var soul::ast::SourcePos thisPos, 
        var std::unique_ptr<otava::ast::Node> byRefCaptureNode) : otava::ast::Node*
        ::= 
        (   STAR{ sourcePos = lexer.GetSourcePos(pos); }
            THIS{ thisPos = lexer.GetSourcePos(pos); return new otava::ast::CurrentObjectCopyCapture(sourcePos, thisPos); }
        |   THIS{ sourcePos = lexer.GetSourcePos(pos); thisPos = sourcePos; return new otava::ast::CurrentObjectByRefCapture(sourcePos, thisPos); }
        |   
            (
                (AMP{ sourcePos = lexer.GetSourcePos(pos); byRefCaptureNode.reset(new otava::ast::ByRefCaptureNode(sourcePos)); })? 
                Identifier(context):identifier{ if (!sourcePos.IsValid()) sourcePos = lexer.GetSourcePos(pos); }
                Ellipsis:ellipsis?
            )
        )
        {
            return new otava::ast::SimpleCaptureNode(sourcePos, identifier, byRefCaptureNode.release(), ellipsis);
        }
        ;

    LambdaDeclarator(otava::symbols::Context* context, var soul::ast::SourcePos sourcePos, var soul::ast::SourcePos lpPos, var soul::ast::SourcePos rpPos,
        var std::unique_ptr<otava::ast::ParameterListNode> parameterList) : otava::ast::Node*
        ::=
        (
            (
                LPAREN{ sourcePos = lexer.GetSourcePos(pos); lpPos = sourcePos; parameterList.reset(new otava::ast::ParameterListNode(sourcePos)); }
                ParameterDeclarationClause(context, parameterList.get()):params 
                RPAREN{ rpPos = lexer.GetSourcePos(pos); parameterList->SetLParenPos(lpPos); parameterList->SetRParenPos(rpPos); }
            )?
            LambdaSpecifiers(context):specifiers{ if (!sourcePos.IsValid()) sourcePos = lexer.GetSourcePos(pos); }
            RequiresClause(context):requiresClause?
        )
        {
            return new otava::ast::LambdaDeclaratorNode(sourcePos, parameterList.release(), specifiers, requiresClause);
        }
        ;

    LambdaSpecifiers(otava::symbols::Context* context, var soul::ast::SourcePos sourcePos) : otava::ast::Node*
        ::= 
        (
            (DeclSpecifierSeq(context):declSpecifiers{ sourcePos = lexer.GetSourcePos(pos); })?
            (NoexceptSpecifier(context):noexceptSpecifier{ if (!sourcePos.IsValid()) sourcePos = lexer.GetSourcePos(pos); })?
            (AttributeSpecifierSeq(context):attributes{ if (!sourcePos.IsValid()) sourcePos = lexer.GetSourcePos(pos); })?
            (TrailingReturnType(context):trailingReturnType{ if (!sourcePos.IsValid()) sourcePos = lexer.GetSourcePos(pos); })?
        )
        {
            return new otava::ast::LambdaSpecifiersNode(sourcePos, declSpecifiers, noexceptSpecifier, attributes, trailingReturnType);
        }
        ;

    LambdaTemplateParams(otava::symbols::Context* context, var soul::ast::SourcePos sourcePos) : otava::ast::Node*
        ::= 
        (
            TemplateParameterList(context):templateParams{ sourcePos = lexer.GetSourcePos(pos); }
            RequiresClause(context):requiresClause?
        )
        {
            return new otava::ast::LambdaTemplateParamsNode(sourcePos, templateParams, requiresClause);
        }
        ;
}
