<parserFile>
 <grammar name="ConceptParser">
  <rule first="{CONCEPT}" name="ConceptDefinition">
   <action first="{CONCEPT}">
    <group first="{CONCEPT}">
     <sequence first="{CONCEPT}">
      <sequence first="{CONCEPT}">
       <sequence first="{CONCEPT}">
        <sequence first="{CONCEPT}">
         <action first="{CONCEPT}">
          <token first="{CONCEPT}" name="CONCEPT"/>
         </action>
         <nonterminal first="{ID}" ruleName="ConceptName"/>
        </sequence>
        <action first="{ASSIGN}">
         <nonterminal first="{ASSIGN}" ruleName="Assign"/>
        </action>
       </sequence>
       <action first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}">
        <nonterminal first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}" ruleName="ConstraintExpression"/>
       </action>
      </sequence>
      <nonterminal first="{SEMICOLON}" ruleName="Semicolon"/>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{ID}" name="ConceptName">
   <action first="{ID}">
    <nonterminal first="{ID}" ruleName="Identifier"/>
   </action>
  </rule>
  <rule first="{ID}" name="ConceptNameChecked">
   <action first="{ID}">
    <nonterminal first="{ID}" ruleName="Identifier"/>
   </action>
  </rule>
  <rule first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}" name="ConstraintExpression">
   <action first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}">
    <nonterminal first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}" ruleName="LogicalOrExpression"/>
   </action>
  </rule>
  <rule first="{REQUIRES}" name="RequiresClause">
   <action first="{REQUIRES}">
    <group first="{REQUIRES}">
     <sequence first="{REQUIRES}">
      <action first="{REQUIRES}">
       <token first="{REQUIRES}" name="REQUIRES"/>
      </action>
      <nonterminal first="{#, AMP_AMP, BEGIN_RAW_STRING_LITERAL, CHARACTER_LITERAL, COLON_COLON, FALSE, FLOATING_LITERAL, ID, INTEGER_LITERAL, LBRACKET, LPAREN, NULLPTR, OPERATOR, OR_OR, REQUIRES, STRING_LITERAL, TEMPLATE, THIS, TILDE, TRUE}" ruleName="ConstraintLogicalOrExpression"/>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{#, AMP_AMP, BEGIN_RAW_STRING_LITERAL, CHARACTER_LITERAL, COLON_COLON, FALSE, FLOATING_LITERAL, ID, INTEGER_LITERAL, LBRACKET, LPAREN, NULLPTR, OPERATOR, OR_OR, REQUIRES, STRING_LITERAL, TEMPLATE, THIS, TILDE, TRUE}" name="ConstraintLogicalOrExpression">
   <action first="{#, AMP_AMP, BEGIN_RAW_STRING_LITERAL, CHARACTER_LITERAL, COLON_COLON, FALSE, FLOATING_LITERAL, ID, INTEGER_LITERAL, LBRACKET, LPAREN, NULLPTR, OPERATOR, OR_OR, REQUIRES, STRING_LITERAL, TEMPLATE, THIS, TILDE, TRUE}">
    <group first="{#, AMP_AMP, BEGIN_RAW_STRING_LITERAL, CHARACTER_LITERAL, COLON_COLON, FALSE, FLOATING_LITERAL, ID, INTEGER_LITERAL, LBRACKET, LPAREN, NULLPTR, OPERATOR, OR_OR, REQUIRES, STRING_LITERAL, TEMPLATE, THIS, TILDE, TRUE}">
     <sequence first="{#, AMP_AMP, BEGIN_RAW_STRING_LITERAL, CHARACTER_LITERAL, COLON_COLON, FALSE, FLOATING_LITERAL, ID, INTEGER_LITERAL, LBRACKET, LPAREN, NULLPTR, OPERATOR, OR_OR, REQUIRES, STRING_LITERAL, TEMPLATE, THIS, TILDE, TRUE}">
      <action first="{#, AMP_AMP, BEGIN_RAW_STRING_LITERAL, CHARACTER_LITERAL, COLON_COLON, FALSE, FLOATING_LITERAL, ID, INTEGER_LITERAL, LBRACKET, LPAREN, NULLPTR, OPERATOR, REQUIRES, STRING_LITERAL, TEMPLATE, THIS, TILDE, TRUE}">
       <nonterminal first="{#, AMP_AMP, BEGIN_RAW_STRING_LITERAL, CHARACTER_LITERAL, COLON_COLON, FALSE, FLOATING_LITERAL, ID, INTEGER_LITERAL, LBRACKET, LPAREN, NULLPTR, OPERATOR, REQUIRES, STRING_LITERAL, TEMPLATE, THIS, TILDE, TRUE}" ruleName="ConstraintLogicalAndExpression"/>
      </action>
      <kleene first="{#, OR_OR}">
       <group first="{OR_OR}">
        <sequence first="{OR_OR}">
         <action first="{OR_OR}">
          <token first="{OR_OR}" name="OR_OR"/>
         </action>
         <action first="{#, AMP_AMP, BEGIN_RAW_STRING_LITERAL, CHARACTER_LITERAL, COLON_COLON, FALSE, FLOATING_LITERAL, ID, INTEGER_LITERAL, LBRACKET, LPAREN, NULLPTR, OPERATOR, REQUIRES, STRING_LITERAL, TEMPLATE, THIS, TILDE, TRUE}">
          <nonterminal first="{#, AMP_AMP, BEGIN_RAW_STRING_LITERAL, CHARACTER_LITERAL, COLON_COLON, FALSE, FLOATING_LITERAL, ID, INTEGER_LITERAL, LBRACKET, LPAREN, NULLPTR, OPERATOR, REQUIRES, STRING_LITERAL, TEMPLATE, THIS, TILDE, TRUE}" ruleName="ConstraintLogicalAndExpression"/>
         </action>
        </sequence>
       </group>
      </kleene>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{#, AMP_AMP, BEGIN_RAW_STRING_LITERAL, CHARACTER_LITERAL, COLON_COLON, FALSE, FLOATING_LITERAL, ID, INTEGER_LITERAL, LBRACKET, LPAREN, NULLPTR, OPERATOR, REQUIRES, STRING_LITERAL, TEMPLATE, THIS, TILDE, TRUE}" name="ConstraintLogicalAndExpression">
   <action first="{#, AMP_AMP, BEGIN_RAW_STRING_LITERAL, CHARACTER_LITERAL, COLON_COLON, FALSE, FLOATING_LITERAL, ID, INTEGER_LITERAL, LBRACKET, LPAREN, NULLPTR, OPERATOR, REQUIRES, STRING_LITERAL, TEMPLATE, THIS, TILDE, TRUE}">
    <group first="{#, AMP_AMP, BEGIN_RAW_STRING_LITERAL, CHARACTER_LITERAL, COLON_COLON, FALSE, FLOATING_LITERAL, ID, INTEGER_LITERAL, LBRACKET, LPAREN, NULLPTR, OPERATOR, REQUIRES, STRING_LITERAL, TEMPLATE, THIS, TILDE, TRUE}">
     <sequence first="{#, AMP_AMP, BEGIN_RAW_STRING_LITERAL, CHARACTER_LITERAL, COLON_COLON, FALSE, FLOATING_LITERAL, ID, INTEGER_LITERAL, LBRACKET, LPAREN, NULLPTR, OPERATOR, REQUIRES, STRING_LITERAL, TEMPLATE, THIS, TILDE, TRUE}">
      <action first="{#, BEGIN_RAW_STRING_LITERAL, CHARACTER_LITERAL, COLON_COLON, FALSE, FLOATING_LITERAL, ID, INTEGER_LITERAL, LBRACKET, LPAREN, NULLPTR, OPERATOR, REQUIRES, STRING_LITERAL, TEMPLATE, THIS, TILDE, TRUE}">
       <nonterminal first="{#, BEGIN_RAW_STRING_LITERAL, CHARACTER_LITERAL, COLON_COLON, FALSE, FLOATING_LITERAL, ID, INTEGER_LITERAL, LBRACKET, LPAREN, NULLPTR, OPERATOR, REQUIRES, STRING_LITERAL, TEMPLATE, THIS, TILDE, TRUE}" ruleName="PrimaryExpression"/>
      </action>
      <kleene first="{#, AMP_AMP}">
       <group first="{AMP_AMP}">
        <sequence first="{AMP_AMP}">
         <action first="{AMP_AMP}">
          <token first="{AMP_AMP}" name="AMP_AMP"/>
         </action>
         <action first="{#, BEGIN_RAW_STRING_LITERAL, CHARACTER_LITERAL, COLON_COLON, FALSE, FLOATING_LITERAL, ID, INTEGER_LITERAL, LBRACKET, LPAREN, NULLPTR, OPERATOR, REQUIRES, STRING_LITERAL, TEMPLATE, THIS, TILDE, TRUE}">
          <nonterminal first="{#, BEGIN_RAW_STRING_LITERAL, CHARACTER_LITERAL, COLON_COLON, FALSE, FLOATING_LITERAL, ID, INTEGER_LITERAL, LBRACKET, LPAREN, NULLPTR, OPERATOR, REQUIRES, STRING_LITERAL, TEMPLATE, THIS, TILDE, TRUE}" ruleName="PrimaryExpression"/>
         </action>
        </sequence>
       </group>
      </kleene>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{REQUIRES}" name="RequiresExpression">
   <action first="{REQUIRES}">
    <group first="{REQUIRES}">
     <sequence first="{REQUIRES}">
      <sequence first="{REQUIRES}">
       <action first="{REQUIRES}">
        <token first="{REQUIRES}" name="REQUIRES"/>
       </action>
       <optional first="{#, LPAREN}">
        <nonterminal first="{LPAREN}" ruleName="RequirementParameterList"/>
       </optional>
      </sequence>
      <nonterminal first="{LBRACE}" ruleName="RequirementBody"/>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{LPAREN}" name="RequirementParameterList">
   <action first="{LPAREN}">
    <group first="{LPAREN}">
     <sequence first="{LPAREN}">
      <sequence first="{LPAREN}">
       <action first="{LPAREN}">
        <token first="{LPAREN}" name="LPAREN"/>
       </action>
       <nonterminal first="{#, ALIGNAS, AMP, AMP_AMP, ARROW, ASSIGN, AUTO, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CLASS, COLON_COLON, COMMA, CONST, CONSTEVAL, CONSTEXPR, CONSTINIT, DECLTYPE, DOUBLE, ELLIPSIS, ENUM, EXPLICIT, EXTERN, FLOAT, FRIEND, ID, INLINE, INT, LANGLE, LBRACKET, LONG, LPAREN, MUTABLE, OPERATOR, SHORT, SIGNED, STAR, STATIC, STRUCT, TEMPLATE, THREAD_LOCAL, TILDE, TYPEDEF, TYPENAME, UNION, UNSIGNED, VIRTUAL, VOID, VOLATILE, WCHAR_T}" ruleName="ParameterDeclarationClause"/>
      </sequence>
      <action first="{RPAREN}">
       <token first="{RPAREN}" name="RPAREN"/>
      </action>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{LBRACE}" name="RequirementBody">
   <action first="{LBRACE}">
    <group first="{LBRACE}">
     <sequence first="{LBRACE}">
      <sequence first="{LBRACE}">
       <action first="{LBRACE}">
        <token first="{LBRACE}" name="LBRACE"/>
       </action>
       <nonterminal first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SEMICOLON, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}" ruleName="RequirementSeq"/>
      </sequence>
      <action first="{RBRACE}">
       <token first="{RBRACE}" name="RBRACE"/>
      </action>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SEMICOLON, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}" name="RequirementSeq">
   <positive first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SEMICOLON, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}">
    <group first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SEMICOLON, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}">
     <action first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SEMICOLON, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}">
      <nonterminal first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SEMICOLON, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}" ruleName="Requirement"/>
     </action>
    </group>
   </positive>
  </rule>
  <rule first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SEMICOLON, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}" name="Requirement">
   <choice first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SEMICOLON, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}">
    <choice first="{LBRACE, REQUIRES, TYPENAME}">
     <choice first="{REQUIRES, TYPENAME}">
      <action first="{REQUIRES}">
       <nonterminal first="{REQUIRES}" ruleName="NestedRequirement"/>
      </action>
      <action first="{TYPENAME}">
       <nonterminal first="{TYPENAME}" ruleName="TypeRequirement"/>
      </action>
     </choice>
     <action first="{LBRACE}">
      <nonterminal first="{LBRACE}" ruleName="CompoundRequirement"/>
     </action>
    </choice>
    <action first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SEMICOLON, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}">
     <nonterminal first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SEMICOLON, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}" ruleName="SimpleRequirement"/>
    </action>
   </choice>
  </rule>
  <rule first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SEMICOLON, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}" name="SimpleRequirement">
   <sequence first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SEMICOLON, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}">
    <action first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}">
     <nonterminal first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}" ruleName="Expression"/>
    </action>
    <action first="{SEMICOLON}">
     <nonterminal first="{SEMICOLON}" ruleName="Semicolon"/>
    </action>
   </sequence>
  </rule>
  <rule first="{TYPENAME}" name="TypeRequirement">
   <sequence first="{TYPENAME}">
    <sequence first="{TYPENAME}">
     <sequence first="{TYPENAME}">
      <sequence first="{TYPENAME}">
       <action first="{TYPENAME}">
        <token first="{TYPENAME}" name="TYPENAME"/>
       </action>
       <optional first="{#, COLON_COLON, ID, TEMPLATE}">
        <nonterminal first="{#, COLON_COLON, ID, TEMPLATE}" ruleName="NestedNameSpecifier"/>
       </optional>
      </sequence>
      <action first="{#}">
       <empty first="{#}"/>
      </action>
     </sequence>
     <action first="{#, ID}">
      <nonterminal first="{#, ID}" ruleName="TypeName"/>
     </action>
    </sequence>
    <action first="{SEMICOLON}">
     <nonterminal first="{SEMICOLON}" ruleName="Semicolon"/>
    </action>
   </sequence>
  </rule>
  <rule first="{LBRACE}" name="CompoundRequirement">
   <action first="{LBRACE}">
    <group first="{LBRACE}">
     <sequence first="{LBRACE}">
      <sequence first="{LBRACE}">
       <sequence first="{LBRACE}">
        <sequence first="{LBRACE}">
         <sequence first="{LBRACE}">
          <action first="{LBRACE}">
           <token first="{LBRACE}" name="LBRACE"/>
          </action>
          <nonterminal first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}" ruleName="Expression"/>
         </sequence>
         <action first="{RBRACE}">
          <token first="{RBRACE}" name="RBRACE"/>
         </action>
        </sequence>
        <optional first="{#, NOEXCEPT}">
         <nonterminal first="{NOEXCEPT}" ruleName="Noexcept"/>
        </optional>
       </sequence>
       <optional first="{#, ARROW}">
        <nonterminal first="{ARROW}" ruleName="ReturnTypeRequirement"/>
       </optional>
      </sequence>
      <nonterminal first="{SEMICOLON}" ruleName="Semicolon"/>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{ARROW}" name="ReturnTypeRequirement">
   <action first="{ARROW}">
    <group first="{ARROW}">
     <sequence first="{ARROW}">
      <action first="{ARROW}">
       <token first="{ARROW}" name="ARROW"/>
      </action>
      <nonterminal first="{#, COLON_COLON, ID, LANGLE, TEMPLATE}" ruleName="TypeConstraint"/>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{REQUIRES}" name="NestedRequirement">
   <action first="{REQUIRES}">
    <group first="{REQUIRES}">
     <sequence first="{REQUIRES}">
      <sequence first="{REQUIRES}">
       <action first="{REQUIRES}">
        <token first="{REQUIRES}" name="REQUIRES"/>
       </action>
       <nonterminal first="{#, ADD_ASSIGN, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, COLON_COLON, COMMA, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNSIGNED, VOID, WCHAR_T, XOR, XOR_ASSIGN}" ruleName="ConstraintExpression"/>
      </sequence>
      <nonterminal first="{SEMICOLON}" ruleName="Semicolon"/>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{#, COLON_COLON, ID, LANGLE, TEMPLATE}" name="TypeConstraint">
   <action first="{#, COLON_COLON, ID, LANGLE, TEMPLATE}">
    <group first="{#, COLON_COLON, ID, LANGLE, TEMPLATE}">
     <sequence first="{#, COLON_COLON, ID, LANGLE, TEMPLATE}">
      <group first="{#, COLON_COLON, ID, TEMPLATE}">
       <action first="{#, COLON_COLON, ID, TEMPLATE}">
        <group first="{#, COLON_COLON, ID, TEMPLATE}">
         <choice first="{#, COLON_COLON, ID, TEMPLATE}">
          <sequence first="{#, COLON_COLON, ID, TEMPLATE}">
           <action first="{#, COLON_COLON, ID, TEMPLATE}">
            <nonterminal first="{#, COLON_COLON, ID, TEMPLATE}" ruleName="NestedNameSpecifier"/>
           </action>
           <action first="{ID}">
            <nonterminal first="{ID}" ruleName="ConceptNameChecked"/>
           </action>
          </sequence>
          <action first="{ID}">
           <nonterminal first="{ID}" ruleName="ConceptNameChecked"/>
          </action>
         </choice>
        </group>
       </action>
      </group>
      <optional first="{#, LANGLE}">
       <group first="{LANGLE}">
        <sequence first="{LANGLE}">
         <sequence first="{LANGLE}">
          <action first="{LANGLE}">
           <token first="{LANGLE}" name="LANGLE"/>
          </action>
          <optional first="{#, ADD_ASSIGN, ALIGNAS, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, CLASS, COLON_COLON, COMMA, CONST, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, ENUM, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, STRUCT, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNION, UNSIGNED, VOID, VOLATILE, WCHAR_T, XOR, XOR_ASSIGN}">
           <nonterminal first="{#, ADD_ASSIGN, ALIGNAS, ALIGNOF, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, AUTO, BEGIN_RAW_STRING_LITERAL, BOOL, CHAR, CHAR16_T, CHAR32_T, CHAR8_T, CHARACTER_LITERAL, CLASS, COLON_COLON, COMMA, CONST, CONST_CAST, CO_AWAIT, CO_YIELD, DECLTYPE, DELETE, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, ELLIPSIS, ENUM, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, MOD, MUL_ASSIGN, NEQ, NEW, NOEXCEPT, NULLPTR, OPERATOR, OR, OR_ASSIGN, OR_OR, PLUS, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM_ASSIGN, REQUIRES, RPAREN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, SPACE_SHIP, STAR, STATIC_CAST, STRING_LITERAL, STRUCT, SUB_ASSIGN, TEMPLATE, THIS, TILDE, TRUE, TYPEID, TYPENAME, UNION, UNSIGNED, VOID, VOLATILE, WCHAR_T, XOR, XOR_ASSIGN}" ruleName="TemplateArgumentList"/>
          </optional>
         </sequence>
         <action first="{RANGLE}">
          <token first="{RANGLE}" name="RANGLE"/>
         </action>
        </sequence>
       </group>
      </optional>
     </sequence>
    </group>
   </action>
  </rule>
 </grammar>
</parserFile>
