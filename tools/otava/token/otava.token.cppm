
// this file has been automatically generated from 'C:/work/soul-mod/tools/otava/token/otava.token' using soul lexer generator version 4.0.0

export module otava.token;

import std;

export namespace otava::token {

constexpr std::int32_t tokenSetID = 1550389823;

constexpr std::int64_t ALIGNAS = (static_cast<std::int64_t>(tokenSetID) << 32) | 1;
constexpr std::int64_t ALIGNOF = (static_cast<std::int64_t>(tokenSetID) << 32) | 2;
constexpr std::int64_t ASM = (static_cast<std::int64_t>(tokenSetID) << 32) | 3;
constexpr std::int64_t AUTO = (static_cast<std::int64_t>(tokenSetID) << 32) | 4;
constexpr std::int64_t BOOL = (static_cast<std::int64_t>(tokenSetID) << 32) | 5;
constexpr std::int64_t BREAK = (static_cast<std::int64_t>(tokenSetID) << 32) | 6;
constexpr std::int64_t CASE = (static_cast<std::int64_t>(tokenSetID) << 32) | 7;
constexpr std::int64_t CATCH = (static_cast<std::int64_t>(tokenSetID) << 32) | 8;
constexpr std::int64_t CHAR = (static_cast<std::int64_t>(tokenSetID) << 32) | 9;
constexpr std::int64_t CHAR8_T = (static_cast<std::int64_t>(tokenSetID) << 32) | 10;
constexpr std::int64_t CHAR16_T = (static_cast<std::int64_t>(tokenSetID) << 32) | 11;
constexpr std::int64_t CHAR32_T = (static_cast<std::int64_t>(tokenSetID) << 32) | 12;
constexpr std::int64_t CLASS = (static_cast<std::int64_t>(tokenSetID) << 32) | 13;
constexpr std::int64_t CONCEPT = (static_cast<std::int64_t>(tokenSetID) << 32) | 14;
constexpr std::int64_t CONST = (static_cast<std::int64_t>(tokenSetID) << 32) | 15;
constexpr std::int64_t CONSTEVAL = (static_cast<std::int64_t>(tokenSetID) << 32) | 16;
constexpr std::int64_t CONSTEXPR = (static_cast<std::int64_t>(tokenSetID) << 32) | 17;
constexpr std::int64_t CONSTINIT = (static_cast<std::int64_t>(tokenSetID) << 32) | 18;
constexpr std::int64_t CONST_CAST = (static_cast<std::int64_t>(tokenSetID) << 32) | 19;
constexpr std::int64_t CONTINUE = (static_cast<std::int64_t>(tokenSetID) << 32) | 20;
constexpr std::int64_t CO_AWAIT = (static_cast<std::int64_t>(tokenSetID) << 32) | 21;
constexpr std::int64_t CO_RETURN = (static_cast<std::int64_t>(tokenSetID) << 32) | 22;
constexpr std::int64_t CO_YIELD = (static_cast<std::int64_t>(tokenSetID) << 32) | 23;
constexpr std::int64_t DECLTYPE = (static_cast<std::int64_t>(tokenSetID) << 32) | 24;
constexpr std::int64_t DEFAULT = (static_cast<std::int64_t>(tokenSetID) << 32) | 25;
constexpr std::int64_t DELETE = (static_cast<std::int64_t>(tokenSetID) << 32) | 26;
constexpr std::int64_t DO = (static_cast<std::int64_t>(tokenSetID) << 32) | 27;
constexpr std::int64_t DOUBLE = (static_cast<std::int64_t>(tokenSetID) << 32) | 28;
constexpr std::int64_t DYNAMIC_CAST = (static_cast<std::int64_t>(tokenSetID) << 32) | 29;
constexpr std::int64_t ELSE = (static_cast<std::int64_t>(tokenSetID) << 32) | 30;
constexpr std::int64_t ENUM = (static_cast<std::int64_t>(tokenSetID) << 32) | 31;
constexpr std::int64_t EXPLICIT = (static_cast<std::int64_t>(tokenSetID) << 32) | 32;
constexpr std::int64_t EXPORT = (static_cast<std::int64_t>(tokenSetID) << 32) | 33;
constexpr std::int64_t EXTERN = (static_cast<std::int64_t>(tokenSetID) << 32) | 34;
constexpr std::int64_t FALSE = (static_cast<std::int64_t>(tokenSetID) << 32) | 35;
constexpr std::int64_t FLOAT = (static_cast<std::int64_t>(tokenSetID) << 32) | 36;
constexpr std::int64_t FOR = (static_cast<std::int64_t>(tokenSetID) << 32) | 37;
constexpr std::int64_t FRIEND = (static_cast<std::int64_t>(tokenSetID) << 32) | 38;
constexpr std::int64_t GOTO = (static_cast<std::int64_t>(tokenSetID) << 32) | 39;
constexpr std::int64_t IF = (static_cast<std::int64_t>(tokenSetID) << 32) | 40;
constexpr std::int64_t INLINE = (static_cast<std::int64_t>(tokenSetID) << 32) | 41;
constexpr std::int64_t INT = (static_cast<std::int64_t>(tokenSetID) << 32) | 42;
constexpr std::int64_t LONG = (static_cast<std::int64_t>(tokenSetID) << 32) | 43;
constexpr std::int64_t MUTABLE = (static_cast<std::int64_t>(tokenSetID) << 32) | 44;
constexpr std::int64_t NAMESPACE = (static_cast<std::int64_t>(tokenSetID) << 32) | 45;
constexpr std::int64_t NEW = (static_cast<std::int64_t>(tokenSetID) << 32) | 46;
constexpr std::int64_t NOEXCEPT = (static_cast<std::int64_t>(tokenSetID) << 32) | 47;
constexpr std::int64_t NULLPTR = (static_cast<std::int64_t>(tokenSetID) << 32) | 48;
constexpr std::int64_t OPERATOR = (static_cast<std::int64_t>(tokenSetID) << 32) | 49;
constexpr std::int64_t PRIVATE = (static_cast<std::int64_t>(tokenSetID) << 32) | 50;
constexpr std::int64_t PROTECTED = (static_cast<std::int64_t>(tokenSetID) << 32) | 51;
constexpr std::int64_t PUBLIC = (static_cast<std::int64_t>(tokenSetID) << 32) | 52;
constexpr std::int64_t REGISTER = (static_cast<std::int64_t>(tokenSetID) << 32) | 53;
constexpr std::int64_t REINTERPRET_CAST = (static_cast<std::int64_t>(tokenSetID) << 32) | 54;
constexpr std::int64_t REQUIRES = (static_cast<std::int64_t>(tokenSetID) << 32) | 55;
constexpr std::int64_t RETURN = (static_cast<std::int64_t>(tokenSetID) << 32) | 56;
constexpr std::int64_t SHORT = (static_cast<std::int64_t>(tokenSetID) << 32) | 57;
constexpr std::int64_t SIGNED = (static_cast<std::int64_t>(tokenSetID) << 32) | 58;
constexpr std::int64_t SIZEOF = (static_cast<std::int64_t>(tokenSetID) << 32) | 59;
constexpr std::int64_t STATIC = (static_cast<std::int64_t>(tokenSetID) << 32) | 60;
constexpr std::int64_t STATIC_ASSERT = (static_cast<std::int64_t>(tokenSetID) << 32) | 61;
constexpr std::int64_t STATIC_CAST = (static_cast<std::int64_t>(tokenSetID) << 32) | 62;
constexpr std::int64_t STRUCT = (static_cast<std::int64_t>(tokenSetID) << 32) | 63;
constexpr std::int64_t SWITCH = (static_cast<std::int64_t>(tokenSetID) << 32) | 64;
constexpr std::int64_t TEMPLATE = (static_cast<std::int64_t>(tokenSetID) << 32) | 65;
constexpr std::int64_t THIS = (static_cast<std::int64_t>(tokenSetID) << 32) | 66;
constexpr std::int64_t THREAD_LOCAL = (static_cast<std::int64_t>(tokenSetID) << 32) | 67;
constexpr std::int64_t THROW = (static_cast<std::int64_t>(tokenSetID) << 32) | 68;
constexpr std::int64_t TRUE = (static_cast<std::int64_t>(tokenSetID) << 32) | 69;
constexpr std::int64_t TRY = (static_cast<std::int64_t>(tokenSetID) << 32) | 70;
constexpr std::int64_t TYPEDEF = (static_cast<std::int64_t>(tokenSetID) << 32) | 71;
constexpr std::int64_t TYPEID = (static_cast<std::int64_t>(tokenSetID) << 32) | 72;
constexpr std::int64_t TYPENAME = (static_cast<std::int64_t>(tokenSetID) << 32) | 73;
constexpr std::int64_t UNION = (static_cast<std::int64_t>(tokenSetID) << 32) | 74;
constexpr std::int64_t UNSIGNED = (static_cast<std::int64_t>(tokenSetID) << 32) | 75;
constexpr std::int64_t USING = (static_cast<std::int64_t>(tokenSetID) << 32) | 76;
constexpr std::int64_t VIRTUAL = (static_cast<std::int64_t>(tokenSetID) << 32) | 77;
constexpr std::int64_t VOID = (static_cast<std::int64_t>(tokenSetID) << 32) | 78;
constexpr std::int64_t VOLATILE = (static_cast<std::int64_t>(tokenSetID) << 32) | 79;
constexpr std::int64_t WCHAR_T = (static_cast<std::int64_t>(tokenSetID) << 32) | 80;
constexpr std::int64_t WHILE = (static_cast<std::int64_t>(tokenSetID) << 32) | 81;
constexpr std::int64_t FLOATING_LITERAL = (static_cast<std::int64_t>(tokenSetID) << 32) | 82;
constexpr std::int64_t INTEGER_LITERAL = (static_cast<std::int64_t>(tokenSetID) << 32) | 83;
constexpr std::int64_t CHARACTER_LITERAL = (static_cast<std::int64_t>(tokenSetID) << 32) | 84;
constexpr std::int64_t STRING_LITERAL = (static_cast<std::int64_t>(tokenSetID) << 32) | 85;
constexpr std::int64_t BEGIN_RAW_STRING_LITERAL = (static_cast<std::int64_t>(tokenSetID) << 32) | 86;
constexpr std::int64_t ID = (static_cast<std::int64_t>(tokenSetID) << 32) | 87;
constexpr std::int64_t COLON_COLON = (static_cast<std::int64_t>(tokenSetID) << 32) | 88;
constexpr std::int64_t COMMA = (static_cast<std::int64_t>(tokenSetID) << 32) | 89;
constexpr std::int64_t ASSIGN = (static_cast<std::int64_t>(tokenSetID) << 32) | 90;
constexpr std::int64_t MUL_ASSIGN = (static_cast<std::int64_t>(tokenSetID) << 32) | 91;
constexpr std::int64_t DIV_ASSIGN = (static_cast<std::int64_t>(tokenSetID) << 32) | 92;
constexpr std::int64_t REM_ASSIGN = (static_cast<std::int64_t>(tokenSetID) << 32) | 93;
constexpr std::int64_t ADD_ASSIGN = (static_cast<std::int64_t>(tokenSetID) << 32) | 94;
constexpr std::int64_t SUB_ASSIGN = (static_cast<std::int64_t>(tokenSetID) << 32) | 95;
constexpr std::int64_t SHIFT_RIGHT_ASSIGN = (static_cast<std::int64_t>(tokenSetID) << 32) | 96;
constexpr std::int64_t SHIFT_LEFT_ASSIGN = (static_cast<std::int64_t>(tokenSetID) << 32) | 97;
constexpr std::int64_t AND_ASSIGN = (static_cast<std::int64_t>(tokenSetID) << 32) | 98;
constexpr std::int64_t XOR_ASSIGN = (static_cast<std::int64_t>(tokenSetID) << 32) | 99;
constexpr std::int64_t OR_ASSIGN = (static_cast<std::int64_t>(tokenSetID) << 32) | 100;
constexpr std::int64_t QUEST = (static_cast<std::int64_t>(tokenSetID) << 32) | 101;
constexpr std::int64_t COLON = (static_cast<std::int64_t>(tokenSetID) << 32) | 102;
constexpr std::int64_t OR_OR = (static_cast<std::int64_t>(tokenSetID) << 32) | 103;
constexpr std::int64_t AMP_AMP = (static_cast<std::int64_t>(tokenSetID) << 32) | 104;
constexpr std::int64_t OR = (static_cast<std::int64_t>(tokenSetID) << 32) | 105;
constexpr std::int64_t XOR = (static_cast<std::int64_t>(tokenSetID) << 32) | 106;
constexpr std::int64_t AMP = (static_cast<std::int64_t>(tokenSetID) << 32) | 107;
constexpr std::int64_t EQ = (static_cast<std::int64_t>(tokenSetID) << 32) | 108;
constexpr std::int64_t NEQ = (static_cast<std::int64_t>(tokenSetID) << 32) | 109;
constexpr std::int64_t LEQ = (static_cast<std::int64_t>(tokenSetID) << 32) | 110;
constexpr std::int64_t GEQ = (static_cast<std::int64_t>(tokenSetID) << 32) | 111;
constexpr std::int64_t SPACE_SHIP = (static_cast<std::int64_t>(tokenSetID) << 32) | 112;
constexpr std::int64_t LANGLE = (static_cast<std::int64_t>(tokenSetID) << 32) | 113;
constexpr std::int64_t RANGLE = (static_cast<std::int64_t>(tokenSetID) << 32) | 114;
constexpr std::int64_t SHIFT_LEFT = (static_cast<std::int64_t>(tokenSetID) << 32) | 115;
constexpr std::int64_t SHIFT_RIGHT = (static_cast<std::int64_t>(tokenSetID) << 32) | 116;
constexpr std::int64_t PLUS = (static_cast<std::int64_t>(tokenSetID) << 32) | 117;
constexpr std::int64_t MINUS = (static_cast<std::int64_t>(tokenSetID) << 32) | 118;
constexpr std::int64_t STAR = (static_cast<std::int64_t>(tokenSetID) << 32) | 119;
constexpr std::int64_t DIV = (static_cast<std::int64_t>(tokenSetID) << 32) | 120;
constexpr std::int64_t MOD = (static_cast<std::int64_t>(tokenSetID) << 32) | 121;
constexpr std::int64_t DOT_STAR = (static_cast<std::int64_t>(tokenSetID) << 32) | 122;
constexpr std::int64_t ARROW_STAR = (static_cast<std::int64_t>(tokenSetID) << 32) | 123;
constexpr std::int64_t LPAREN = (static_cast<std::int64_t>(tokenSetID) << 32) | 124;
constexpr std::int64_t RPAREN = (static_cast<std::int64_t>(tokenSetID) << 32) | 125;
constexpr std::int64_t PLUS_PLUS = (static_cast<std::int64_t>(tokenSetID) << 32) | 126;
constexpr std::int64_t MINUS_MINUS = (static_cast<std::int64_t>(tokenSetID) << 32) | 127;
constexpr std::int64_t EXCLAMATION = (static_cast<std::int64_t>(tokenSetID) << 32) | 128;
constexpr std::int64_t TILDE = (static_cast<std::int64_t>(tokenSetID) << 32) | 129;
constexpr std::int64_t LBRACKET = (static_cast<std::int64_t>(tokenSetID) << 32) | 130;
constexpr std::int64_t RBRACKET = (static_cast<std::int64_t>(tokenSetID) << 32) | 131;
constexpr std::int64_t LBRACE = (static_cast<std::int64_t>(tokenSetID) << 32) | 132;
constexpr std::int64_t RBRACE = (static_cast<std::int64_t>(tokenSetID) << 32) | 133;
constexpr std::int64_t DOT = (static_cast<std::int64_t>(tokenSetID) << 32) | 134;
constexpr std::int64_t ARROW = (static_cast<std::int64_t>(tokenSetID) << 32) | 135;
constexpr std::int64_t SEMICOLON = (static_cast<std::int64_t>(tokenSetID) << 32) | 136;
constexpr std::int64_t ELLIPSIS = (static_cast<std::int64_t>(tokenSetID) << 32) | 137;
constexpr std::int64_t ANGLE_HEADER_NAME = (static_cast<std::int64_t>(tokenSetID) << 32) | 138;
constexpr std::int64_t QUOTE_HEADER_NAME = (static_cast<std::int64_t>(tokenSetID) << 32) | 139;
constexpr std::int64_t KEYWORD = (static_cast<std::int64_t>(tokenSetID) << 32) | 140;
constexpr std::int64_t WS = (static_cast<std::int64_t>(tokenSetID) << 32) | 141;
constexpr std::int64_t NEWLINE = (static_cast<std::int64_t>(tokenSetID) << 32) | 142;
constexpr std::int64_t LINE_COMMENT = (static_cast<std::int64_t>(tokenSetID) << 32) | 143;
constexpr std::int64_t BLOCK_COMMENT_START = (static_cast<std::int64_t>(tokenSetID) << 32) | 144;
constexpr std::int64_t BLOCK_COMMENT_END = (static_cast<std::int64_t>(tokenSetID) << 32) | 145;
constexpr std::int64_t OTHER = (static_cast<std::int64_t>(tokenSetID) << 32) | 146;
constexpr std::int64_t PP_LINE = (static_cast<std::int64_t>(tokenSetID) << 32) | 147;
constexpr std::int64_t HASH = (static_cast<std::int64_t>(tokenSetID) << 32) | 148;
constexpr std::int64_t DEFINE = (static_cast<std::int64_t>(tokenSetID) << 32) | 149;
constexpr std::int64_t INCLUDE = (static_cast<std::int64_t>(tokenSetID) << 32) | 150;
constexpr std::int64_t IFDEF = (static_cast<std::int64_t>(tokenSetID) << 32) | 151;
constexpr std::int64_t IFNDEF = (static_cast<std::int64_t>(tokenSetID) << 32) | 152;
constexpr std::int64_t ELIF = (static_cast<std::int64_t>(tokenSetID) << 32) | 153;
constexpr std::int64_t ENDIF = (static_cast<std::int64_t>(tokenSetID) << 32) | 154;
constexpr std::int64_t UNDEF = (static_cast<std::int64_t>(tokenSetID) << 32) | 155;
constexpr std::int64_t DEFINED = (static_cast<std::int64_t>(tokenSetID) << 32) | 156;
constexpr std::int64_t PRAGMA = (static_cast<std::int64_t>(tokenSetID) << 32) | 157;
constexpr std::int64_t MAX = (static_cast<std::int64_t>(tokenSetID) << 32) | 158;

} // otava::token
