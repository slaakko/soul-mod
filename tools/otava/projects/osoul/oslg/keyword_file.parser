// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

export module soul.slg.keyword.file.parser;

[interface]import soul.ast.slg;
[implementation]import soul.cpp.token;
[implementation]import soul.cpp.op.token;
[implementation]import soul.punctuation.token;
[implementation]import soul.tool.token;
[implementation]import soul.common.common.parser;
[implementation]import soul.common.token.parser;
[implementation]import soul.lex;

parser KeywordFileParser
{
    lexer soul::lex::slg::SlgLexer<char32_t>;

    main;
    using CommonParser.QualifiedId;
    using CommonParser.Import;

    KeywordFile(var std::unique_ptr<soul::ast::slg::KeywordFile> keywordFile, var std::unique_ptr<soul::ast::slg::KeywordCollection> keywordCollection) : soul::ast::slg::KeywordFile*
        ::= 
        (
            empty{ keywordFile.reset(new soul::ast::slg::KeywordFile(lexer.FileName())); }
            Imports(keywordFile.get()):imports
            KEYWORDS
            QualifiedId:keywordCollectionName{ keywordCollection.reset(new soul::ast::slg::KeywordCollection(keywordCollectionName)); }
            LBRACE
            (Keyword:keyword{ keywordCollection->AddKeyword(keyword); } % COMMA)?
            RBRACE
        )
        {
            keywordFile->SetKeywordCollection(keywordCollection.release());
            return keywordFile.release();
        }
        ;

    Imports(soul::ast::slg::KeywordFile* keywordFile)
        ::= (Import:imp{ keywordFile->AddImport(imp); })*
        ;

    Keyword(var std::string str, var std::string tokenName) : soul::ast::slg::Keyword*
        ::= 
        (   
            LPAREN 
            STRING_LITERAL
            { 
                auto rv = lexer.TokenToStringLiteral(pos);
                if (!rv) return std::unexpected<int>(rv.error());
                auto u = util::ToUtf8(*rv);
                if (!u) return std::unexpected<int>(u.error());
                str = *u;
            } 
            COMMA 
            ID
            { 
                auto rv = lexer.TokenToUtf8(pos);
                if (!rv) return std::unexpected<int>(rv.error());
                tokenName = *rv;
            }
            RPAREN
        )
        {
            auto sp = lexer.GetSourcePos(pos);
            if (!sp) return std::unexpected<int>(sp.error());
            return new soul::ast::slg::Keyword(*sp, str, tokenName);
        }
        ;
}
