// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

export module soul.spg.spg.file.parser;

[interface]import soul.ast.spg;
[interface]import soul.ast.common;
[implementation]import soul.cpp.token;
[implementation]import soul.cpp.op.token;
[implementation]import soul.punctuation.token;
[implementation]import soul.tool.token;
[implementation]import soul.common.common.parser;
[implementation]import soul.lex.spg;

parser SpgFileParser
{
    lexer soul::lex::spg::SpgLexer<char32_t>;

    main;
    using CommonParser.QualifiedId;
	using CommonParser.FilePath;
    using CommonParser.ParserKeyword;

    SpgFile(var std::unique_ptr<soul::ast::spg::SpgFile> spgFile) : soul::ast::spg::SpgFile*
        ::= 
        (
            PROJECT QualifiedId:projectName{ spgFile.reset(new soul::ast::spg::SpgFile(lexer.FileName(), projectName)); } SEMICOLON
            (SpgFileDeclaration:declaration{ spgFile->AddDeclaration(declaration); })*
        )
        {
            return spgFile.release();
        }
        ;

	SpgFileDeclaration : soul::ast::spg::SpgFileDeclaration*
		::= ParserFileDeclaration:parserFileDeclaration{ return parserFileDeclaration; }
        |   TokenFileDeclaration:tokenFileDeclaration{ return tokenFileDeclaration; }
		;

    ParserFileDeclaration(var bool external) : soul::ast::spg::ParserFileDeclaration*
        ::= 
        (
            (EXTERN{ external = true; } | empty{ external = false; }) ParserKeyword:parserKeyword FilePath:filePath SEMICOLON
        )
        {
            auto sp = lexer.GetSourcePos(pos);
            if (!sp) return std::unexpected<int>(sp.error());
            return new soul::ast::spg::ParserFileDeclaration(*sp, filePath, external);
        }
        ;

    TokenFileDeclaration(var bool external) : soul::ast::spg::SpgFileDeclaration*
        ::= 
        (
            (EXTERN{ external = true; } | empty{ external = false; }) TOKENS FilePath:filePath SEMICOLON
        )
        {
            auto sp = lexer.GetSourcePos(pos);
            if (!sp) return std::unexpected<int>(sp.error());
            return new soul::ast::spg::TokenFileDeclaration(*sp, filePath, external); 
        }
        ;
}
