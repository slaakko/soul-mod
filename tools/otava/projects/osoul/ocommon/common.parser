// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

export module soul.common.common.parser;

[interface]import soul.ast.common;
[implementation]import soul.cpp.token;
[implementation]import soul.cpp.op.token;
[implementation]import soul.punctuation.token;
[implementation]import soul.tool.token;
[implementation]import soul.lex;
[implementation]import soul.common.token.parser;

parser CommonParser
{
	lexer soul::lex::slg::SlgLexer<char32_t>;
	lexer soul::lex::spg::SpgLexer<char32_t>; 

	QualifiedId(var std::string str) : std::string
		::= (
                ID
                {
                    auto u = lexer.TokenToUtf8(pos);
                    if (!u) return std::unexpected<int>(u.error());
                    str.append(*u); 
                } 
                (
                    DOT 
                    ID
                    { 
                        auto u = lexer.TokenToUtf8(pos);
                        if (!u) return std::unexpected<int>(u.error());
                        str.append(1, '.').append(*u); 
                    }
                )*
            )
        { 
            return str; 
        }
		;

	Export(var std::unique_ptr<soul::ast::common::ExportModule> exp) : soul::ast::common::ExportModule*
		::= 
		(
			ExportKeyword:exportKeyword ModuleKeyword:moduleKeyword QualifiedId:moduleName{ exp.reset(new soul::ast::common::ExportModule(moduleName)); } SEMICOLON
		)
		{
			return exp.release();
		}
		;

	Import(var std::unique_ptr<soul::ast::common::Import> imp, var soul::ast::common::ImportPrefix prefix) : soul::ast::common::Import*
		::= 
		(
			(ImportPrefix:importPrefix{ prefix = importPrefix; } | empty{ prefix = soul::ast::common::ImportPrefix::interfacePrefix; })
			ImportKeyword:importKeyword QualifiedId:moduleName{ imp.reset(new soul::ast::common::Import(moduleName, prefix)); } SEMICOLON
		)
		{
			return imp.release();
		}
		;

    ImportPrefix : soul::ast::common::ImportPrefix
        ::= ImplementationPrefix:implementationPrefix{ return implementationPrefix; }
        |   InterfacePrefix:interfacePrefix{ return interfacePrefix; }
        ;

	ExprString : std::string
		::= STRING_LITERAL
            { 
                auto t = lexer.GetToken(pos);
                if (!t)  return std::unexpected<int>(t.error());
                auto u = soul::common::token::parser::MakeExprStringValue(lexer.FileName(), *t); 
                if (!u) return std::unexpected<int>(u.error());
                return *u;
            }
		;

	FilePath : std::string
		::= FILEPATH
            { 
                auto t = lexer.GetToken(pos);
                if (!t)  return std::unexpected<int>(t.error());
                auto u = soul::common::token::parser::MakeFilePath(lexer.FileName(), *t); 
                if (!u) return std::unexpected<int>(u.error());
                return *u;
            }
		;

	ExportKeyword
		::= ID
            { 
                auto u = lexer.TokenToUtf8(pos);
                if (!u) return std::unexpected<int>(u.error());
                pass = *u == "export"; 
            }
		;

	ModuleKeyword 
		::= ID
            { 
                auto u = lexer.TokenToUtf8(pos);
                if (!u) return std::unexpected<int>(u.error());
                pass = *u == "module"; 
            }
		;

	ImportKeyword
		::= ID
            { 
                auto u = lexer.TokenToUtf8(pos);
                if (!u) return std::unexpected<int>(u.error());
                pass = *u == "import"; 
            }
		;

	ImplementationPrefix : soul::ast::common::ImportPrefix
		::= LBRACKET ImplementationKeyword:implementationKeyword RBRACKET{ return soul::ast::common::ImportPrefix::implementationPrefix; }
		;

	InterfacePrefix : soul::ast::common::ImportPrefix
		::= LBRACKET InterfaceKeyword:interfaceKeyword RBRACKET{ return soul::ast::common::ImportPrefix::interfacePrefix; }
		;

	ImplementationKeyword 
		::= ID
            { 
                auto u = lexer.TokenToUtf8(pos);
                if (!u) return std::unexpected<int>(u.error());
                pass = *u == "implementation"; 
            }
		;

	InterfaceKeyword 
		::= ID
            { 
                auto u = lexer.TokenToUtf8(pos);
                if (!u) return std::unexpected<int>(u.error());
                pass = *u == "interface"; 
            }
		;

	ParserKeyword
		::= ID
            { 
                auto u = lexer.TokenToUtf8(pos);
                if (!u) return std::unexpected<int>(u.error());
                pass = *u == "parser"; 
            }
		;

	LexerKeyword
		::= ID
            { 
                auto u = lexer.TokenToUtf8(pos);
                if (!u) return std::unexpected<int>(u.error());
                pass = *u == "lexer"; 
            }
		;
}
