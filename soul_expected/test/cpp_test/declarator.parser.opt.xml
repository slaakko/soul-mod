<parserFile>
 <grammar name="DeclaratorParser">
  <rule first="{#, AMP, ASSIGN, COLON_COLON, COMMA, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}" name="InitDeclaratorList">
   <action first="{#, AMP, ASSIGN, COLON_COLON, COMMA, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}">
    <group first="{#, AMP, ASSIGN, COLON_COLON, COMMA, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}">
     <sequence first="{#, AMP, ASSIGN, COLON_COLON, COMMA, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}">
      <action first="{#}">
       <empty first="{#}"/>
      </action>
      <group first="{#, AMP, ASSIGN, COLON_COLON, COMMA, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}">
       <list first="{#, AMP, ASSIGN, COLON_COLON, COMMA, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}">
        <sequence first="{#, AMP, ASSIGN, COLON_COLON, COMMA, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}">
         <action first="{#, AMP, ASSIGN, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}">
          <nonterminal first="{#, AMP, ASSIGN, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}" ruleName="InitDeclarator"/>
         </action>
         <kleene first="{#, COMMA}">
          <sequence first="{COMMA}">
           <token first="{COMMA}" name="COMMA"/>
           <action first="{#, AMP, ASSIGN, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}">
            <nonterminal first="{#, AMP, ASSIGN, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}" ruleName="InitDeclarator"/>
           </action>
          </sequence>
         </kleene>
        </sequence>
       </list>
      </group>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{#, AMP, ASSIGN, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}" name="InitDeclarator">
   <action first="{#, AMP, ASSIGN, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}">
    <group first="{#, AMP, ASSIGN, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}">
     <sequence first="{#, AMP, ASSIGN, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}">
      <nonterminal first="{#, AMP, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}" ruleName="Declarator"/>
      <optional first="{#, ASSIGN, LPAREN}">
       <nonterminal first="{ASSIGN, LPAREN}" ruleName="Initializer"/>
      </optional>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{#, AMP, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}" name="Declarator">
   <action first="{#, AMP, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}">
    <group first="{#, AMP, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}">
     <choice first="{#, AMP, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}">
      <action first="{#, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR}">
       <nonterminal first="{#, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR}" ruleName="DirectDeclarator"/>
      </action>
      <sequence first="{AMP, STAR}">
       <action first="{AMP, STAR}">
        <nonterminal first="{AMP, STAR}" ruleName="PtrOperator"/>
       </action>
       <action first="{#, AMP, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}">
        <nonterminal first="{#, AMP, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}" ruleName="Declarator"/>
       </action>
      </sequence>
     </choice>
    </group>
   </action>
  </rule>
  <rule first="{#, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR}" name="DirectDeclarator">
   <action first="{#, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR}">
    <group first="{#, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR}">
     <sequence first="{#, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR}">
      <action first="{#, COLON_COLON, ID, LANGLE, OPERATOR}">
       <nonterminal first="{#, COLON_COLON, ID, LANGLE, OPERATOR}" ruleName="DeclaratorId"/>
      </action>
      <kleene first="{#, LBRACKET, LPAREN}">
       <group first="{LBRACKET, LPAREN}">
        <switch first="{LBRACKET, LPAREN}">
         <case first="{LBRACKET}">
          <choice first="{LBRACKET}">
           <sequence first="{LBRACKET}">
            <sequence first="{LBRACKET}">
             <token first="{LBRACKET}" name="LBRACKET"/>
             <nonterminal first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, COMMA, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}" ruleName="ConstantExpression"/>
            </sequence>
            <action first="{RBRACKET}">
             <token first="{RBRACKET}" name="RBRACKET"/>
            </action>
           </sequence>
           <sequence first="{LBRACKET}">
            <token first="{LBRACKET}" name="LBRACKET"/>
            <action first="{RBRACKET}">
             <token first="{RBRACKET}" name="RBRACKET"/>
            </action>
           </sequence>
          </choice>
         </case>
         <case first="{LPAREN}">
          <sequence first="{LPAREN}">
           <sequence first="{LPAREN}">
            <token first="{LPAREN}" name="LPAREN"/>
            <nonterminal first="{#, AMP, COLON_COLON, ID, LANGLE, LBRACKET, LPAREN, OPERATOR, STAR}" ruleName="Declarator"/>
           </sequence>
           <action first="{RPAREN}">
            <token first="{RPAREN}" name="RPAREN"/>
           </action>
          </sequence>
         </case>
        </switch>
       </group>
      </kleene>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{#, COLON_COLON, ID, LANGLE, OPERATOR}" name="DeclaratorId">
   <choice first="{#, COLON_COLON, ID, LANGLE, OPERATOR}">
    <action first="{#, COLON_COLON, ID, LANGLE, OPERATOR}">
     <nonterminal first="{#, COLON_COLON, ID, LANGLE, OPERATOR}" ruleName="IdExpression"/>
    </action>
    <action first="{#, COLON_COLON, ID, LANGLE}">
     <nonterminal first="{#, COLON_COLON, ID, LANGLE}" ruleName="TypeName"/>
    </action>
   </choice>
  </rule>
  <rule first="{#, AMP, BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, COLON_COLON, CONST, DOUBLE, FLOAT, ID, INT, LANGLE, LBRACKET, LONG, LPAREN, SHORT, SIGNED, STAR, UNSIGNED, VOID, VOLATILE, WCHART}" name="TypeId">
   <sequence first="{#, AMP, BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, COLON_COLON, CONST, DOUBLE, FLOAT, ID, INT, LANGLE, LBRACKET, LONG, LPAREN, SHORT, SIGNED, STAR, UNSIGNED, VOID, VOLATILE, WCHART}">
    <action first="{#}">
     <empty first="{#}"/>
    </action>
    <action first="{#, AMP, BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, COLON_COLON, CONST, DOUBLE, FLOAT, ID, INT, LANGLE, LBRACKET, LONG, LPAREN, SHORT, SIGNED, STAR, UNSIGNED, VOID, VOLATILE, WCHART}">
     <group first="{#, AMP, BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, COLON_COLON, CONST, DOUBLE, FLOAT, ID, INT, LANGLE, LBRACKET, LONG, LPAREN, SHORT, SIGNED, STAR, UNSIGNED, VOID, VOLATILE, WCHART}">
      <sequence first="{#, AMP, BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, COLON_COLON, CONST, DOUBLE, FLOAT, ID, INT, LANGLE, LBRACKET, LONG, LPAREN, SHORT, SIGNED, STAR, UNSIGNED, VOID, VOLATILE, WCHART}">
       <group first="{#, BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, COLON_COLON, CONST, DOUBLE, FLOAT, ID, INT, LANGLE, LONG, SHORT, SIGNED, UNSIGNED, VOID, VOLATILE, WCHART}">
        <choice first="{#, BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, COLON_COLON, CONST, DOUBLE, FLOAT, ID, INT, LANGLE, LONG, SHORT, SIGNED, UNSIGNED, VOID, VOLATILE, WCHART}">
         <nonterminal first="{BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, CONST, DOUBLE, FLOAT, INT, LONG, SHORT, SIGNED, UNSIGNED, VOID, VOLATILE, WCHART}" ruleName="TypeSpecifierSeq"/>
         <action first="{#, COLON_COLON, ID, LANGLE}">
          <nonterminal first="{#, COLON_COLON, ID, LANGLE}" ruleName="TypeName"/>
         </action>
        </choice>
       </group>
       <optional first="{#, AMP, LBRACKET, LPAREN, STAR}">
        <group first="{AMP, LBRACKET, LPAREN, STAR}">
         <action first="{AMP, LBRACKET, LPAREN, STAR}">
          <nonterminal first="{AMP, LBRACKET, LPAREN, STAR}" ruleName="AbstractDeclarator"/>
         </action>
        </group>
       </optional>
      </sequence>
     </group>
    </action>
   </sequence>
  </rule>
  <rule first="{#, BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, COLON_COLON, CONST, DOUBLE, FLOAT, ID, INT, LANGLE, LONG, SHORT, SIGNED, UNSIGNED, VOID, VOLATILE, WCHART}" name="Type">
   <sequence first="{#, BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, COLON_COLON, CONST, DOUBLE, FLOAT, ID, INT, LANGLE, LONG, SHORT, SIGNED, UNSIGNED, VOID, VOLATILE, WCHART}">
    <action first="{#}">
     <empty first="{#}"/>
    </action>
    <action first="{#, BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, COLON_COLON, CONST, DOUBLE, FLOAT, ID, INT, LANGLE, LONG, SHORT, SIGNED, UNSIGNED, VOID, VOLATILE, WCHART}">
     <group first="{#, BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, COLON_COLON, CONST, DOUBLE, FLOAT, ID, INT, LANGLE, LONG, SHORT, SIGNED, UNSIGNED, VOID, VOLATILE, WCHART}">
      <choice first="{#, BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, COLON_COLON, CONST, DOUBLE, FLOAT, ID, INT, LANGLE, LONG, SHORT, SIGNED, UNSIGNED, VOID, VOLATILE, WCHART}">
       <positive first="{BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, CONST, DOUBLE, FLOAT, INT, LONG, SHORT, SIGNED, UNSIGNED, VOID, VOLATILE, WCHART}">
        <group first="{BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, CONST, DOUBLE, FLOAT, INT, LONG, SHORT, SIGNED, UNSIGNED, VOID, VOLATILE, WCHART}">
         <action first="{BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, CONST, DOUBLE, FLOAT, INT, LONG, SHORT, SIGNED, UNSIGNED, VOID, VOLATILE, WCHART}">
          <nonterminal first="{BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, CONST, DOUBLE, FLOAT, INT, LONG, SHORT, SIGNED, UNSIGNED, VOID, VOLATILE, WCHART}" ruleName="TypeSpecifier"/>
         </action>
        </group>
       </positive>
       <action first="{#, COLON_COLON, ID, LANGLE}">
        <nonterminal first="{#, COLON_COLON, ID, LANGLE}" ruleName="TypeName"/>
       </action>
      </choice>
     </group>
    </action>
   </sequence>
  </rule>
  <rule first="{BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, CONST, DOUBLE, FLOAT, INT, LONG, SHORT, SIGNED, UNSIGNED, VOID, VOLATILE, WCHART}" name="TypeSpecifierSeq">
   <positive first="{BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, CONST, DOUBLE, FLOAT, INT, LONG, SHORT, SIGNED, UNSIGNED, VOID, VOLATILE, WCHART}">
    <group first="{BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, CONST, DOUBLE, FLOAT, INT, LONG, SHORT, SIGNED, UNSIGNED, VOID, VOLATILE, WCHART}">
     <action first="{BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, CONST, DOUBLE, FLOAT, INT, LONG, SHORT, SIGNED, UNSIGNED, VOID, VOLATILE, WCHART}">
      <nonterminal first="{BOOL, CHAR, CHAR16T, CHAR32T, CHAR8T, CONST, DOUBLE, FLOAT, INT, LONG, SHORT, SIGNED, UNSIGNED, VOID, VOLATILE, WCHART}" ruleName="TypeSpecifier"/>
     </action>
    </group>
   </positive>
  </rule>
  <rule first="{AMP, LBRACKET, LPAREN, STAR}" name="AbstractDeclarator">
   <action first="{AMP, LBRACKET, LPAREN, STAR}">
    <group first="{AMP, LBRACKET, LPAREN, STAR}">
     <switch first="{AMP, LBRACKET, LPAREN, STAR}">
      <case first="{AMP, STAR}">
       <sequence first="{AMP, STAR}">
        <action first="{AMP, STAR}">
         <nonterminal first="{AMP, STAR}" ruleName="PtrOperator"/>
        </action>
        <optional first="{#, AMP, LBRACKET, LPAREN, STAR}">
         <group first="{AMP, LBRACKET, LPAREN, STAR}">
          <action first="{AMP, LBRACKET, LPAREN, STAR}">
           <nonterminal first="{AMP, LBRACKET, LPAREN, STAR}" ruleName="AbstractDeclarator"/>
          </action>
         </group>
        </optional>
       </sequence>
      </case>
      <case first="{LBRACKET, LPAREN}">
       <action first="{LBRACKET, LPAREN}">
        <nonterminal first="{LBRACKET, LPAREN}" ruleName="DirectAbstractDeclarator"/>
       </action>
      </case>
     </switch>
    </group>
   </action>
  </rule>
  <rule first="{LBRACKET, LPAREN}" name="DirectAbstractDeclarator">
   <action first="{LBRACKET, LPAREN}">
    <group first="{LBRACKET, LPAREN}">
     <positive first="{LBRACKET, LPAREN}">
      <group first="{LBRACKET, LPAREN}">
       <switch first="{LBRACKET, LPAREN}">
        <case first="{LBRACKET}">
         <choice first="{LBRACKET}">
          <sequence first="{LBRACKET}">
           <sequence first="{LBRACKET}">
            <token first="{LBRACKET}" name="LBRACKET"/>
            <nonterminal first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, COMMA, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}" ruleName="ConstantExpression"/>
           </sequence>
           <action first="{RBRACKET}">
            <token first="{RBRACKET}" name="RBRACKET"/>
           </action>
          </sequence>
          <sequence first="{LBRACKET}">
           <token first="{LBRACKET}" name="LBRACKET"/>
           <action first="{RBRACKET}">
            <token first="{RBRACKET}" name="RBRACKET"/>
           </action>
          </sequence>
         </choice>
        </case>
        <case first="{LPAREN}">
         <sequence first="{LPAREN}">
          <sequence first="{LPAREN}">
           <token first="{LPAREN}" name="LPAREN"/>
           <nonterminal first="{AMP, LBRACKET, LPAREN, STAR}" ruleName="AbstractDeclarator"/>
          </sequence>
          <action first="{RPAREN}">
           <token first="{RPAREN}" name="RPAREN"/>
          </action>
         </sequence>
        </case>
       </switch>
      </group>
     </positive>
    </group>
   </action>
  </rule>
  <rule first="{AMP, STAR}" name="PtrOperator">
   <action first="{AMP, STAR}">
    <group first="{AMP, STAR}">
     <switch first="{AMP, STAR}">
      <case first="{STAR}">
       <sequence first="{STAR}">
        <action first="{STAR}">
         <token first="{STAR}" name="STAR"/>
        </action>
        <optional first="{#, CONST, VOLATILE}">
         <group first="{CONST, VOLATILE}">
          <action first="{CONST, VOLATILE}">
           <nonterminal first="{CONST, VOLATILE}" ruleName="CVQualifierSeq"/>
          </action>
         </group>
        </optional>
       </sequence>
      </case>
      <case first="{AMP}">
       <action first="{AMP}">
        <token first="{AMP}" name="AMP"/>
       </action>
      </case>
     </switch>
    </group>
   </action>
  </rule>
  <rule first="{CONST, VOLATILE}" name="CVQualifierSeq">
   <action first="{CONST, VOLATILE}">
    <group first="{CONST, VOLATILE}">
     <positive first="{CONST, VOLATILE}">
      <group first="{CONST, VOLATILE}">
       <action first="{CONST, VOLATILE}">
        <nonterminal first="{CONST, VOLATILE}" ruleName="CVQualifier"/>
       </action>
      </group>
     </positive>
    </group>
   </action>
  </rule>
  <rule first="{ASSIGN, LPAREN}" name="Initializer">
   <action first="{ASSIGN, LPAREN}">
    <group first="{ASSIGN, LPAREN}">
     <switch first="{ASSIGN, LPAREN}">
      <case first="{ASSIGN}">
       <sequence first="{ASSIGN}">
        <token first="{ASSIGN}" name="ASSIGN"/>
        <action first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}">
         <nonterminal first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}" ruleName="InitializerClause"/>
        </action>
       </sequence>
      </case>
      <case first="{LPAREN}">
       <sequence first="{LPAREN}">
        <sequence first="{LPAREN}">
         <action first="{LPAREN}">
          <token first="{LPAREN}" name="LPAREN"/>
         </action>
         <nonterminal first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, COMMA, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}" ruleName="ExpressionList"/>
        </sequence>
        <token first="{RPAREN}" name="RPAREN"/>
       </sequence>
      </case>
     </switch>
    </group>
   </action>
  </rule>
  <rule first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}" name="InitializerClause">
   <action first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}">
    <group first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}">
     <choice first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}">
      <choice first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}">
       <action first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}">
        <nonterminal first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}" ruleName="AssignmentExpression"/>
       </action>
       <sequence first="{LBRACE}">
        <sequence first="{LBRACE}">
         <action first="{LBRACE}">
          <token first="{LBRACE}" name="LBRACE"/>
         </action>
         <nonterminal first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, COMMA, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}" ruleName="InitializerList"/>
        </sequence>
        <token first="{RBRACE}" name="RBRACE"/>
       </sequence>
      </choice>
      <sequence first="{LBRACE}">
       <token first="{LBRACE}" name="LBRACE"/>
       <action first="{RBRACE}">
        <token first="{RBRACE}" name="RBRACE"/>
       </action>
      </sequence>
     </choice>
    </group>
   </action>
  </rule>
  <rule first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, COMMA, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}" name="InitializerList">
   <list first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, COMMA, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}">
    <sequence first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, COMMA, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}">
     <action first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}">
      <nonterminal first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}" ruleName="InitializerClause"/>
     </action>
     <kleene first="{#, COMMA}">
      <sequence first="{COMMA}">
       <token first="{COMMA}" name="COMMA"/>
       <action first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}">
        <nonterminal first="{#, AMP, AMP_AMP, AND_ASSIGN, ARROW, ARROW_STAR, ASSIGN, BOOL, CARET, CHAR, CHAR16T, CHAR32T, CHAR8T, CHAR_LITERAL, COLON_COLON, CONST, CONST_CAST, DELETE, DISJUNCTION, DIV, DIV_ASSIGN, DOT, DOT_STAR, DOUBLE, DYNAMIC_CAST, EQ, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, INT, INTEGER_LITERAL, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_ASSIGN, MINUS_MINUS, MUL_ASSIGN, NEQ, NEW, NULLPTR, OPERATOR, OR_ASSIGN, PIPE, PLUS, PLUS_ASSIGN, PLUS_PLUS, QUEST, RANGLE, REINTERPRET_CAST, REM, REM_ASSIGN, SHIFT_LEFT, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT, SHIFT_RIGHT_ASSIGN, SHORT, SIGNED, SIZEOF, STAR, STATIC_CAST, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, UNSIGNED, VOID, VOLATILE, WCHART, XOR_ASSIGN}" ruleName="InitializerClause"/>
       </action>
      </sequence>
     </kleene>
    </sequence>
   </list>
  </rule>
 </grammar>
</parserFile>
