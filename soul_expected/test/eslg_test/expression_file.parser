// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

export module soul_expected.slg.expression.file.parser;

[interface]import soul_expected.ast.slg;
[implementation]import soul_expected.cpp.token;
[implementation]import soul_expected.cpp.op.token;
[implementation]import soul_expected.punctuation.token;
[implementation]import soul_expected.tool.token;
[implementation]import soul_expected.common.common.parser;
[implementation]import soul_expected.common.token.parser;
[implementation]import soul_expected.lex.slg;

parser ExpressionFileParser
{
    lexer soul_expected::lex::slg::SlgLexer<char32_t>;

    main;
    using CommonParser.QualifiedId;
    using CommonParser.ExprString;

    ExpressionFile(var std::unique_ptr<soul_expected::ast::slg::ExpressionFile> expressionFile, 
        var std::unique_ptr<soul_expected::ast::slg::ExpressionCollection> expressionCollection) :
        soul_expected::ast::slg::ExpressionFile*
        ::=
        (
            empty{ expressionFile.reset(new soul_expected::ast::slg::ExpressionFile(lexer.FileName())); }
            EXPRESSIONS
            QualifiedId:expressionCollectionName{ expressionCollection.reset(new soul_expected::ast::slg::ExpressionCollection(expressionCollectionName)); }
            LBRACE
            (
				Expression:expression{ expressionCollection->AddExpression(expression); }
			)*
            RBRACE
        )
        {
            expressionFile->SetExpressionCollection(expressionCollection.release());
            return expressionFile.release();
        }
        ;

    Expression(var std::string name, var int line) : soul_expected::ast::slg::Expression*
        ::= 
        (
            ID
            { 
                auto rv = lexer.GetToken(pos); 
                if (!rv) return std::unexpected<int>(rv.error());
                auto token = *rv;
                auto n = util::ToUtf8(token->ToString());
                if (!n) return std::unexpected<int>(n.error());
                name = *n;
                line = token->line; 
            } 
            ASSIGN 
            ExprString:exprString 
            SEMICOLON
        )
        {
            return new soul_expected::ast::slg::Expression(name, exprString, line);
        }
        ;
}
