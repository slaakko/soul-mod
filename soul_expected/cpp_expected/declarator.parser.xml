<parserFile>
 <grammar name="DeclaratorParser">
  <rule first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #, #}" name="InitDeclaratorList">
   <action first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #, #}">
    <group first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #, #}">
     <sequence first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #, #}">
      <action first="{#}">
       <empty first="{#}"/>
      </action>
      <group first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}">
       <list first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}">
        <sequence first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}">
         <action first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}">
          <nonterminal first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}" ruleName="InitDeclarator"/>
         </action>
         <kleene first="{COMMA, #}">
          <sequence first="{COMMA}">
           <token first="{COMMA}" name="COMMA"/>
           <action first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}">
            <nonterminal first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}" ruleName="InitDeclarator"/>
           </action>
          </sequence>
         </kleene>
        </sequence>
       </list>
      </group>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}" name="InitDeclarator">
   <action first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}">
    <group first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}">
     <sequence first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}">
      <nonterminal first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}" ruleName="Declarator"/>
      <optional first="{LPAREN, ASSIGN, #}">
       <nonterminal first="{LPAREN, ASSIGN}" ruleName="Initializer"/>
      </optional>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}" name="Declarator">
   <action first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}">
    <group first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}">
     <choice first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}">
      <action first="{OPERATOR, ID, COLON_COLON, #, #}">
       <nonterminal first="{OPERATOR, ID, COLON_COLON, #, #}" ruleName="DirectDeclarator"/>
      </action>
      <sequence first="{STAR, AMP}">
       <action first="{STAR, AMP}">
        <nonterminal first="{STAR, AMP}" ruleName="PtrOperator"/>
       </action>
       <action first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}">
        <nonterminal first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}" ruleName="Declarator"/>
       </action>
      </sequence>
     </choice>
    </group>
   </action>
  </rule>
  <rule first="{OPERATOR, ID, COLON_COLON, #, #}" name="DirectDeclarator">
   <action first="{OPERATOR, ID, COLON_COLON, #, #}">
    <group first="{OPERATOR, ID, COLON_COLON, #, #}">
     <sequence first="{OPERATOR, ID, COLON_COLON, #, #}">
      <action first="{OPERATOR, ID, COLON_COLON, #, #}">
       <nonterminal first="{OPERATOR, ID, COLON_COLON, #, #}" ruleName="DeclaratorId"/>
      </action>
      <kleene first="{LPAREN, LBRACKET, #}">
       <group first="{LPAREN, LBRACKET}">
        <choice first="{LPAREN, LBRACKET}">
         <choice first="{LBRACKET}">
          <sequence first="{LBRACKET}">
           <sequence first="{LBRACKET}">
            <token first="{LBRACKET}" name="LBRACKET"/>
            <nonterminal first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, COMMA, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}" ruleName="ConstantExpression"/>
           </sequence>
           <action first="{RBRACKET}">
            <token first="{RBRACKET}" name="RBRACKET"/>
           </action>
          </sequence>
          <sequence first="{LBRACKET}">
           <token first="{LBRACKET}" name="LBRACKET"/>
           <action first="{RBRACKET}">
            <token first="{RBRACKET}" name="RBRACKET"/>
           </action>
          </sequence>
         </choice>
         <sequence first="{LPAREN}">
          <sequence first="{LPAREN}">
           <token first="{LPAREN}" name="LPAREN"/>
           <nonterminal first="{OPERATOR, ID, COLON_COLON, STAR, #, AMP, #}" ruleName="Declarator"/>
          </sequence>
          <action first="{RPAREN}">
           <token first="{RPAREN}" name="RPAREN"/>
          </action>
         </sequence>
        </choice>
       </group>
      </kleene>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{OPERATOR, ID, COLON_COLON, #, #}" name="DeclaratorId">
   <choice first="{OPERATOR, ID, COLON_COLON, #, #}">
    <action first="{OPERATOR, ID, COLON_COLON, #, #}">
     <nonterminal first="{OPERATOR, ID, COLON_COLON, #, #}" ruleName="IdExpression"/>
    </action>
    <action first="{ID, COLON_COLON, #}">
     <nonterminal first="{ID, COLON_COLON, #}" ruleName="TypeName"/>
    </action>
   </choice>
  </rule>
  <rule first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, ID, UNSIGNED, LONG, SHORT, VOID, VOLATILE, COLON_COLON, #, #}" name="TypeId">
   <sequence first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, ID, UNSIGNED, LONG, SHORT, VOID, VOLATILE, COLON_COLON, #, #}">
    <action first="{#}">
     <empty first="{#}"/>
    </action>
    <action first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, ID, UNSIGNED, LONG, SHORT, VOID, VOLATILE, COLON_COLON, #}">
     <group first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, ID, UNSIGNED, LONG, SHORT, VOID, VOLATILE, COLON_COLON, #}">
      <sequence first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, ID, UNSIGNED, LONG, SHORT, VOID, VOLATILE, COLON_COLON, #}">
       <group first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, ID, UNSIGNED, LONG, SHORT, VOID, VOLATILE, COLON_COLON, #}">
        <choice first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, ID, UNSIGNED, LONG, SHORT, VOID, VOLATILE, COLON_COLON, #}">
         <nonterminal first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, UNSIGNED, LONG, SHORT, VOID, VOLATILE}" ruleName="TypeSpecifierSeq"/>
         <action first="{ID, COLON_COLON, #}">
          <nonterminal first="{ID, COLON_COLON, #}" ruleName="TypeName"/>
         </action>
        </choice>
       </group>
       <optional first="{LPAREN, LBRACKET, STAR, AMP, #}">
        <group first="{LPAREN, LBRACKET, STAR, AMP}">
         <action first="{LPAREN, LBRACKET, STAR, AMP}">
          <nonterminal first="{LPAREN, LBRACKET, STAR, AMP}" ruleName="AbstractDeclarator"/>
         </action>
        </group>
       </optional>
      </sequence>
     </group>
    </action>
   </sequence>
  </rule>
  <rule first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, ID, UNSIGNED, LONG, SHORT, VOID, VOLATILE, COLON_COLON, #, #}" name="Type">
   <sequence first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, ID, UNSIGNED, LONG, SHORT, VOID, VOLATILE, COLON_COLON, #, #}">
    <action first="{#}">
     <empty first="{#}"/>
    </action>
    <action first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, ID, UNSIGNED, LONG, SHORT, VOID, VOLATILE, COLON_COLON, #}">
     <group first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, ID, UNSIGNED, LONG, SHORT, VOID, VOLATILE, COLON_COLON, #}">
      <choice first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, ID, UNSIGNED, LONG, SHORT, VOID, VOLATILE, COLON_COLON, #}">
       <positive first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, UNSIGNED, LONG, SHORT, VOID, VOLATILE}">
        <group first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, UNSIGNED, LONG, SHORT, VOID, VOLATILE}">
         <action first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, UNSIGNED, LONG, SHORT, VOID, VOLATILE}">
          <nonterminal first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, UNSIGNED, LONG, SHORT, VOID, VOLATILE}" ruleName="TypeSpecifier"/>
         </action>
        </group>
       </positive>
       <action first="{ID, COLON_COLON, #}">
        <nonterminal first="{ID, COLON_COLON, #}" ruleName="TypeName"/>
       </action>
      </choice>
     </group>
    </action>
   </sequence>
  </rule>
  <rule first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, UNSIGNED, LONG, SHORT, VOID, VOLATILE}" name="TypeSpecifierSeq">
   <positive first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, UNSIGNED, LONG, SHORT, VOID, VOLATILE}">
    <group first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, UNSIGNED, LONG, SHORT, VOID, VOLATILE}">
     <action first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, UNSIGNED, LONG, SHORT, VOID, VOLATILE}">
      <nonterminal first="{CHAR, BOOL, FLOAT, CHAR16T, CONST, DOUBLE, CHAR32T, CHAR8T, WCHART, SIGNED, INT, UNSIGNED, LONG, SHORT, VOID, VOLATILE}" ruleName="TypeSpecifier"/>
     </action>
    </group>
   </positive>
  </rule>
  <rule first="{LPAREN, LBRACKET, STAR, AMP}" name="AbstractDeclarator">
   <action first="{LPAREN, LBRACKET, STAR, AMP}">
    <group first="{LPAREN, LBRACKET, STAR, AMP}">
     <choice first="{LPAREN, LBRACKET, STAR, AMP}">
      <sequence first="{STAR, AMP}">
       <action first="{STAR, AMP}">
        <nonterminal first="{STAR, AMP}" ruleName="PtrOperator"/>
       </action>
       <optional first="{LPAREN, LBRACKET, STAR, AMP, #}">
        <group first="{LPAREN, LBRACKET, STAR, AMP}">
         <action first="{LPAREN, LBRACKET, STAR, AMP}">
          <nonterminal first="{LPAREN, LBRACKET, STAR, AMP}" ruleName="AbstractDeclarator"/>
         </action>
        </group>
       </optional>
      </sequence>
      <action first="{LPAREN, LBRACKET}">
       <nonterminal first="{LPAREN, LBRACKET}" ruleName="DirectAbstractDeclarator"/>
      </action>
     </choice>
    </group>
   </action>
  </rule>
  <rule first="{LPAREN, LBRACKET}" name="DirectAbstractDeclarator">
   <action first="{LPAREN, LBRACKET}">
    <group first="{LPAREN, LBRACKET}">
     <positive first="{LPAREN, LBRACKET}">
      <group first="{LPAREN, LBRACKET}">
       <choice first="{LPAREN, LBRACKET}">
        <choice first="{LBRACKET}">
         <sequence first="{LBRACKET}">
          <sequence first="{LBRACKET}">
           <token first="{LBRACKET}" name="LBRACKET"/>
           <nonterminal first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, COMMA, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}" ruleName="ConstantExpression"/>
          </sequence>
          <action first="{RBRACKET}">
           <token first="{RBRACKET}" name="RBRACKET"/>
          </action>
         </sequence>
         <sequence first="{LBRACKET}">
          <token first="{LBRACKET}" name="LBRACKET"/>
          <action first="{RBRACKET}">
           <token first="{RBRACKET}" name="RBRACKET"/>
          </action>
         </sequence>
        </choice>
        <sequence first="{LPAREN}">
         <sequence first="{LPAREN}">
          <token first="{LPAREN}" name="LPAREN"/>
          <nonterminal first="{LPAREN, LBRACKET, STAR, AMP}" ruleName="AbstractDeclarator"/>
         </sequence>
         <action first="{RPAREN}">
          <token first="{RPAREN}" name="RPAREN"/>
         </action>
        </sequence>
       </choice>
      </group>
     </positive>
    </group>
   </action>
  </rule>
  <rule first="{STAR, AMP}" name="PtrOperator">
   <action first="{STAR, AMP}">
    <group first="{STAR, AMP}">
     <choice first="{STAR, AMP}">
      <sequence first="{STAR}">
       <action first="{STAR}">
        <token first="{STAR}" name="STAR"/>
       </action>
       <optional first="{CONST, VOLATILE, #}">
        <group first="{CONST, VOLATILE}">
         <action first="{CONST, VOLATILE}">
          <nonterminal first="{CONST, VOLATILE}" ruleName="CVQualifierSeq"/>
         </action>
        </group>
       </optional>
      </sequence>
      <action first="{AMP}">
       <token first="{AMP}" name="AMP"/>
      </action>
     </choice>
    </group>
   </action>
  </rule>
  <rule first="{CONST, VOLATILE}" name="CVQualifierSeq">
   <action first="{CONST, VOLATILE}">
    <group first="{CONST, VOLATILE}">
     <positive first="{CONST, VOLATILE}">
      <group first="{CONST, VOLATILE}">
       <action first="{CONST, VOLATILE}">
        <nonterminal first="{CONST, VOLATILE}" ruleName="CVQualifier"/>
       </action>
      </group>
     </positive>
    </group>
   </action>
  </rule>
  <rule first="{LPAREN, ASSIGN}" name="Initializer">
   <action first="{LPAREN, ASSIGN}">
    <group first="{LPAREN, ASSIGN}">
     <choice first="{LPAREN, ASSIGN}">
      <sequence first="{ASSIGN}">
       <token first="{ASSIGN}" name="ASSIGN"/>
       <action first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, LBRACE, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}">
        <nonterminal first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, LBRACE, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}" ruleName="InitializerClause"/>
       </action>
      </sequence>
      <sequence first="{LPAREN}">
       <sequence first="{LPAREN}">
        <action first="{LPAREN}">
         <token first="{LPAREN}" name="LPAREN"/>
        </action>
        <nonterminal first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, COMMA, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}" ruleName="ExpressionList"/>
       </sequence>
       <token first="{RPAREN}" name="RPAREN"/>
      </sequence>
     </choice>
    </group>
   </action>
  </rule>
  <rule first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, LBRACE, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}" name="InitializerClause">
   <action first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, LBRACE, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}">
    <group first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, LBRACE, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}">
     <choice first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, LBRACE, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}">
      <choice first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, LBRACE, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}">
       <action first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}">
        <nonterminal first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}" ruleName="AssignmentExpression"/>
       </action>
       <sequence first="{LBRACE}">
        <sequence first="{LBRACE}">
         <action first="{LBRACE}">
          <token first="{LBRACE}" name="LBRACE"/>
         </action>
         <nonterminal first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, LBRACE, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}" ruleName="InitializerList"/>
        </sequence>
        <token first="{RBRACE}" name="RBRACE"/>
       </sequence>
      </choice>
      <sequence first="{LBRACE}">
       <token first="{LBRACE}" name="LBRACE"/>
       <action first="{RBRACE}">
        <token first="{RBRACE}" name="RBRACE"/>
       </action>
      </sequence>
     </choice>
    </group>
   </action>
  </rule>
  <rule first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, LBRACE, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}" name="InitializerList">
   <list first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, LBRACE, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}">
    <sequence first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, LBRACE, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}">
     <action first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, LBRACE, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}">
      <nonterminal first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, LBRACE, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}" ruleName="InitializerClause"/>
     </action>
     <kleene first="{COMMA, #}">
      <sequence first="{COMMA}">
       <token first="{COMMA}" name="COMMA"/>
       <action first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, LBRACE, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}">
        <nonterminal first="{RANGLE, CHAR, THIS, BOOL, SIZEOF, FLOAT, CHAR16T, CONST, NEW, CONST_CAST, DOUBLE, OPERATOR, CHAR32T, REINTERPRET_CAST, TRUE, STATIC_CAST, CHAR8T, DYNAMIC_CAST, WCHART, DOT, LPAREN, LANGLE, SIGNED, INT, ID, UNSIGNED, LBRACE, FLOATING_LITERAL, LONG, INTEGER_LITERAL, SHORT, DELETE, STRING_LITERAL, VOID, CHAR_LITERAL, LBRACKET, VOLATILE, TYPEID, FALSE, NULLPTR, SHIFT_LEFT, MUL_ASSIGN, PLUS_PLUS, PLUS, NEQ, EQ, REM, DIV_ASSIGN, DIV, PLUS_ASSIGN, SHIFT_LEFT_ASSIGN, AND_ASSIGN, OR_ASSIGN, SHIFT_RIGHT, MINUS_ASSIGN, MINUS_MINUS, MINUS, GEQ, ASSIGN, COLON_COLON, REM_ASSIGN, XOR_ASSIGN, DISJUNCTION, LEQ, STAR, ARROW_STAR, AMP_AMP, SHIFT_RIGHT_ASSIGN, DOT_STAR, #, PIPE, CARET, TILDE, EXCLAMATION, QUEST, AMP, ARROW, #}" ruleName="InitializerClause"/>
       </action>
      </sequence>
     </kleene>
    </sequence>
   </list>
  </rule>
 </grammar>
</parserFile>
