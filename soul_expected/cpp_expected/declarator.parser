// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

export module soul_expected.cpp.declarator.parser;

[interface]import soul_expected.ast.cpp;
[implementation]import soul_expected.cpp.token;
[implementation]import soul_expected.cpp.op.token;
[implementation]import soul_expected.tool.token;
[implementation]import soul_expected.punctuation.token;
[implementation]import soul_expected.cpp.declaration.parser;
[implementation]import soul_expected.cpp.expression.parser;
[implementation]import soul_expected.lex.slg;
[implementation]import soul_expected.lex.spg;

parser DeclaratorParser
{
    lexer soul_expected::lex::slg::SlgLexer<char32_t>;
    lexer soul_expected::lex::spg::SpgLexer<char32_t>;

    using ExpressionParser.ConstantExpression;
    using ExpressionParser.IdExpression;
    using ExpressionParser.ExpressionList;
    using ExpressionParser.AssignmentExpression;
    using DeclarationParser.TypeName;
    using DeclarationParser.TypeSpecifier;
    using DeclarationParser.CVQualifier;

    InitDeclaratorList(soul_expected::ast::cpp::Context* context, 
        var std::unique_ptr<soul_expected::ast::cpp::InitDeclaratorListNode> initDeclaratorList) : soul_expected::ast::cpp::InitDeclaratorListNode*
        ::= 
        (   empty
            { 
                auto sp = lexer.GetSourcePos(pos);
                if (!sp) return std::unexpected<int>(sp.error());
                initDeclaratorList.reset(new soul_expected::ast::cpp::InitDeclaratorListNode(*sp)); 
            }
            (
                InitDeclarator(context):initDeclarator{ initDeclaratorList->Add(initDeclarator); } % COMMA
            )
        )
        {
            return initDeclaratorList.release();
        }
        ;

    InitDeclarator(soul_expected::ast::cpp::Context* context) : soul_expected::ast::cpp::InitDeclaratorNode*
        ::= 
        (
            Declarator(context):declarator Initializer(context):initializer?
        )
        {
            auto sp = lexer.GetSourcePos(pos);
            if (!sp) return std::unexpected<int>(sp.error());
            return new soul_expected::ast::cpp::InitDeclaratorNode(*sp, declarator, initializer);
        }
        ;

    Declarator(soul_expected::ast::cpp::Context* context, var std::string str) : std::string
        ::=
        (   DirectDeclarator(context):directDeclarator{ str.append(directDeclarator); }
        |   PtrOperator(context):ptrOperator{ str.append(ptrOperator); } Declarator(context):declarator{ str.append(declarator); }
        )
        {
            return str;
        }
        ;
    
    DirectDeclarator(soul_expected::ast::cpp::Context* context, var std::string str) : std::string
        ::= 
        (
            DeclaratorId(context):declaratorId{ str.append(declaratorId); }
            (   LBRACKET ConstantExpression(context):expr RBRACKET{ str.append("[").append(expr->ToString()).append("]"); }
            |   LBRACKET RBRACKET{ str.append("[]"); }
            |   LPAREN Declarator(context):declarator RPAREN{ str.append("(").append(declarator).append(")"); }
            )*
        )
        {
            return str;
        }
        ;

    DeclaratorId(soul_expected::ast::cpp::Context* context) : std::string
        ::= IdExpression(context):idExpr{ return idExpr->ToString(); }
        |   TypeName(context):typeName{ return typeName->ToString(); }
        ;

    TypeId(soul_expected::ast::cpp::Context* context, var std::unique_ptr<soul_expected::ast::cpp::TypeIdNode> typeId) : soul_expected::ast::cpp::TypeIdNode*
        ::= empty{ typeId.reset(new soul_expected::ast::cpp::TypeIdNode(*lexer.GetSourcePos(pos))); }
        (
            (
                TypeSpecifierSeq(context, typeId.get()):typeSpecifierSeq | TypeName(context):typeName{ typeId->Add(typeName); }
            )
            (
                AbstractDeclarator(context):abstractDeclarator{ typeId->SetDeclarator(abstractDeclarator); }
            )?
        )
        {
            return typeId.release();
        }
        ;

    Type(soul_expected::ast::cpp::Context* context, var std::unique_ptr<soul_expected::ast::cpp::TypeNode> type) : soul_expected::ast::cpp::TypeNode*
        ::= empty
            { 
                auto sp = lexer.GetSourcePos(pos);
                if (!sp) return std::unexpected<int>(sp.error());
                type.reset(new soul_expected::ast::cpp::TypeNode(*sp)); 
            }
        (   
            (
                TypeSpecifier(context):typeSpecifier{ type->Add(typeSpecifier); }
            )+
        |   TypeName(context):typeName{ type->Add(typeName); }
        )
        {
            return type.release();
        }
        ;

    TypeSpecifierSeq(soul_expected::ast::cpp::Context* context, soul_expected::ast::cpp::TypeIdNode* typeId)
        ::= (TypeSpecifier(context):typeSpecifier{ typeId->Add(typeSpecifier); })+
        ;

    AbstractDeclarator(soul_expected::ast::cpp::Context* context, var std::string str) : std::string
        ::= 
        (   PtrOperator(context):ptrOperator{ str.append(ptrOperator); } (AbstractDeclarator(context):abstractDeclarator{ str.append(abstractDeclarator); })?
        |   DirectAbstractDeclarator(context):directAbstractDeclarator{ str.append(directAbstractDeclarator); }
        )
        {
            return str;
        }
        ;

    DirectAbstractDeclarator(soul_expected::ast::cpp::Context* context, var std::string str) : std::string
        ::=
        (
            (   LBRACKET ConstantExpression(context):expr RBRACKET{ str.append("[").append(expr->ToString()).append("]"); }
            |   LBRACKET RBRACKET{ str.append("[]"); }
            |   LPAREN AbstractDeclarator(context):abstractDeclarator RPAREN{ str.append("(").append(abstractDeclarator).append(")"); }
            )+
        )
        {
            return str;
        }
        ;

    PtrOperator(soul_expected::ast::cpp::Context* context, var std::string str) : std::string
        ::= 
        (   STAR{ str.append("*"); } (CVQualifierSeq(context):cvQualifiedSeq{ str.append(1, ' ').append(cvQualifiedSeq); })?
        |   AMP{ str.append("&"); }
        )
        {
            return str;
        }
        ;

    CVQualifierSeq(soul_expected::ast::cpp::Context* context, var std::string str) : std::string
        ::= 
        (
            (
                CVQualifier(context):cvQualifier{ if (str != std::string()) str.append(1, ' '); str.append(cvQualifier->ToString()); }
            )+
        )
        {
            return str;
        }
        ;

    Initializer(soul_expected::ast::cpp::Context* context, 
        var std::unique_ptr<soul_expected::ast::cpp::InitializerNode> initializer) : soul_expected::ast::cpp::InitializerNode*
        ::=
        (   ASSIGN InitializerClause(context):initializerClause
            { 
                auto sp = lexer.GetSourcePos(pos);
                if (!sp) return std::unexpected<int>(sp.error());
                initializer.reset(new soul_expected::ast::cpp::InitializerNode(*sp, initializerClause)); 
            }
        |   LPAREN
            { 
                auto sp = lexer.GetSourcePos(pos);
                if (!sp) return std::unexpected<int>(sp.error());
                initializer.reset(new soul_expected::ast::cpp::InitializerNode(*sp, nullptr)); 
            } 
            ExpressionList(context, initializer.get()):exprList 
            RPAREN
        )
        {
            return initializer.release();
        }
        ;

    InitializerClause(soul_expected::ast::cpp::Context* context, 
        var std::unique_ptr<soul_expected::ast::cpp::AssignInitNode> assignInit) : soul_expected::ast::cpp::AssignInitNode*
        ::=
        (   AssignmentExpression(context):expr
            { 
                auto sp = lexer.GetSourcePos(pos);
                if (!sp) return std::unexpected<int>(sp.error());
                assignInit.reset(new soul_expected::ast::cpp::AssignInitNode(*sp, expr)); 
            }
        |   LBRACE
            { 
                auto sp = lexer.GetSourcePos(pos);
                if (!sp) return std::unexpected<int>(sp.error());
                assignInit.reset(new soul_expected::ast::cpp::AssignInitNode(*sp, nullptr)); 
            } 
            InitializerList(context, assignInit.get()):initializerList 
            RBRACE
        |   LBRACE RBRACE
            { 
                auto sp = lexer.GetSourcePos(pos);
                if (!sp) return std::unexpected<int>(sp.error());
                assignInit.reset(new soul_expected::ast::cpp::AssignInitNode(*sp, nullptr)); 
            }
        )
        {
            return assignInit.release();
        }
        ;

    InitializerList(soul_expected::ast::cpp::Context* context, soul_expected::ast::cpp::AssignInitNode* init)
        ::= InitializerClause(context):initializerClause{ init->Add(initializerClause); } % COMMA
        ;
}
