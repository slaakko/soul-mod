export module minilang.parser.expression;

[interface]import minilang.ast;
[implementation]import minilang.lexer;
[implementation]import minilang.token;
[implementation]import minilang.parser.literal;
[implementation]import minilang.parser.identifier;

parser ExpressionParser
{
    lexer minilang::lexer::MinilangLexer<char32_t>;

    using LiteralParser.Literal;
    using IdentifierParser.Identifier;

    Expression : minilang::ast::Node*
        ::= EqualityExpression:expr{ return expr; }
        ;

    PrimaryExpression : minilang::ast::Node*
        ::= Literal:literal{ return literal; }
        |   Identifier:identifier{ return identifier; }
        |   LPAREN Expression:expression RPAREN{ return new minilang::ast::ParenthesizedExpressionNode(expression); }
        ;

    PostfixExpression(var std::unique_ptr<minilang::ast::Node> expr) : minilang::ast::Node*
        ::= 
		(
			PrimaryExpression:primary{ expr.reset(primary); } 
            (
                LPAREN{ expr.reset(new minilang::ast::InvokeNode(expr.release())); } ExpressionList(expr.get()):args? RPAREN!
            )*
		)
		{
			return expr.release();
		}
        ;

    ExpressionList(minilang::ast::Node* owner)
        ::= Expression:left{ owner->AddArgument(left); } 
            (
                COMMA Expression:right!{ owner->AddArgument(right); }
            )*
        ;

    UnaryExpression : minilang::ast::Node*
        ::= UnaryOperator:op UnaryExpression:unaryExpr!{ return new minilang::ast::UnaryExprNode(op, unaryExpr); }
        |   PostfixExpression:postfixExpr{ return postfixExpr; }
        ;

    UnaryOperator : minilang::ast::Operator
        ::= PLUS{ return minilang::ast::Operator::unaryPlus; }
        |   MINUS{ return minilang::ast::Operator::unaryMinus; }
        |   NOT{ return minilang::ast::Operator::not_; }
        ;

    MultiplicativeExpression(var std::unique_ptr<minilang::ast::Node> expr) : minilang::ast::Node*
        ::= 
		(
			UnaryExpression:left{ expr.reset(left); } 
            (
                MultiplicativeOperator:op UnaryExpression:right!{ expr.reset(new minilang::ast::BinaryExprNode(op, expr.release(), right)); }
            )*
		)
		{
			return expr.release();
		}
        ;

    MultiplicativeOperator : minilang::ast::Operator
        ::= MUL{ return minilang::ast::Operator::mul; }
        |   DIV{ return minilang::ast::Operator::div; }
        |   MOD{ return minilang::ast::Operator::mod; }
        ;

    AdditiveExpression(var std::unique_ptr<minilang::ast::Node> expr) : minilang::ast::Node*
        ::= 
		(
			MultiplicativeExpression:left{ expr.reset(left); } 
            (
                AdditiveOperator:op MultiplicativeExpression:right!{ expr.reset(new minilang::ast::BinaryExprNode(op, expr.release(), right)); }
            )*
		)
		{
			return expr.release();
		}
        ;

    AdditiveOperator : minilang::ast::Operator
        ::= PLUS{ return minilang::ast::Operator::add; }
        |   MINUS{ return minilang::ast::Operator::sub; }
        ;

    RelationalExpression(var std::unique_ptr<minilang::ast::Node> expr) : minilang::ast::Node*
        ::= 
		(	
			AdditiveExpression:left{ expr.reset(left); } 
            (
                RelationalOperator:op AdditiveExpression:right!{ expr.reset(new minilang::ast::BinaryExprNode(op, expr.release(), right)); }
            )*
		)
		{
			return expr.release();
		}
        ;

    RelationalOperator : minilang::ast::Operator
        ::= LESS{ return minilang::ast::Operator::less; }
        |   GREATER{ return minilang::ast::Operator::greater; }
        |   LEQ{ return minilang::ast::Operator::lessOrEqual; }
        |   GEQ{ return minilang::ast::Operator::greaterOrEqual; }
        ;

    EqualityExpression(var std::unique_ptr<minilang::ast::Node> expr) : minilang::ast::Node*
        ::= 
		(
			RelationalExpression:left{ expr.reset(left); } 
            (
                EqualityOperator:op RelationalExpression:right!{ expr.reset(new minilang::ast::BinaryExprNode(op, expr.release(), right)); }
            )*
		)
		{
			return expr.release();
		}
        ;

    EqualityOperator : minilang::ast::Operator
        ::= EQ{ return minilang::ast::Operator::equal; }
        |   NEQ{ return minilang::ast::Operator::notEqual; }
        ;
}
