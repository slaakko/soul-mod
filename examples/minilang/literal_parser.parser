export module minilang.parser.literal;

[implementation]import minilang.tree;
[implementation]import minilang.lexer;
[implementation]import minilang.token;

parser LiteralParser
{
    lexer minilang::lexer::MinilangLexer<char32_t>;

    Literal : minilang::tree::Node*
        ::= BooleanLiteral:booleanLiteral{ return booleanLiteral; }
        |   IntegerLiteral:integerLiteral{ return integerLiteral; }
        ;

    BooleanLiteral : minilang::tree::Node*
        ::= TRUE{ return new minilang::tree::BooleanLiteralNode(true); }
        |   FALSE{ return new minilang::tree::BooleanLiteralNode(false); }
        ;

    IntegerLiteral : minilang::tree::Node*
        ::= INTEGER_LITERAL{ auto token = lexer.GetToken(pos); return new minilang::tree::IntegerLiteralNode(token.ToLong()); }
        ;
}
