export module minilang.parser.statement;

[implementation]import minilang.ast;
[implementation]import minilang.lexer;
[implementation]import minilang.token;
[implementation]import minilang.parser.expression;
[implementation]import minilang.parser.type;
[implementation]import minilang.parser.identifier;

parser StatementParser
{
    lexer minilang::lexer::MinilangLexer<char32_t>;

    using ExpressionParser.Expression;
    using TypeParser.Type;
    using IdentifierParser.Identifier;

    Statement : minilang::ast::Node*
        ::= IfStatement:ifS{ return ifS; }
        |   WhileStatement:whileS{ return whileS; }
        |   ReturnStatement:returnS{ return returnS; }
        |   CompoundStatement:compoundS{ return compoundS; }
        |   ConstructionStatement:constructionS{ return constructionS; }
        |   AssignmentStatement:assignmentS{ return assignmentS; }
        ;

    IfStatement : minilang::ast::Node*
        ::= 
		(
			IF LPAREN! Expression:condition! RPAREN! Statement:thenS! (ELSE Statement:elseS!)?
		)
		{
			return new minilang::ast::IfStatementNode(condition, thenS, elseS);
		}
        ;

    WhileStatement : minilang::ast::Node*
        ::= 
		(
			WHILE LPAREN! Expression:condition! RPAREN! Statement:statement!
		)
		{
			return new minilang::ast::WhileStatementNode(condition, statement);
		}
        ;

    ReturnStatement : minilang::ast::Node*
        ::= 
		(
			RETURN Expression:returnValue? SEMICOLON!
		)
		{
			return new minilang::ast::ReturnStatementNode(returnValue);
		}
        ;

    CompoundStatement(var std::unique_ptr<minilang::ast::CompoundStatementNode> compoundStatement) : minilang::ast::CompoundStatementNode*
        ::= 
		(
			LBRACE{ compoundStatement.reset(new minilang::ast::CompoundStatementNode()); } 
			(
				Statement:statement{ compoundStatement->AddStatement(statement); }
			)* 
			RBRACE!
		)
		{
			return compoundStatement.release();
		}
        ;

    ConstructionStatement : minilang::ast::Node*
        ::= 
		(
			Type:type Identifier:variableName! ASSIGN! Expression:value! SEMICOLON!
		)
		{
			return new minilang::ast::ConstructionStatementNode(type, variableName, value);
		}
        ;

    AssignmentStatement : minilang::ast::Node*
        ::= 
		(
			Identifier:variableName ASSIGN! Expression:value! SEMICOLON!
		)
		{
			return new minilang::ast::AssignmentStatementNode(variableName, value);
		}
        ;
}
