<parserFile>
 <grammar name="DeclarationParser">
  <rule first="{#, LPAREN, LBRACKET, LANGLE, SEMICOLON, COMMA, AMP, AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE, USING, NAMESPACE, OPERATOR, ID, STAR, COLON_COLON, ASSIGN}" name="BlockDeclaration">
   <choice first="{#, LPAREN, LBRACKET, LANGLE, SEMICOLON, COMMA, AMP, AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE, USING, NAMESPACE, OPERATOR, ID, STAR, COLON_COLON, ASSIGN}">
    <choice first="{USING, NAMESPACE}">
     <switch first="{USING, NAMESPACE}">
      <case first="{NAMESPACE}">
       <action first="{NAMESPACE}">
        <nonterminal first="{NAMESPACE}" ruleName="NamespaceAliasDefinition"/>
       </action>
      </case>
      <case first="{USING}">
       <action first="{USING}">
        <nonterminal first="{USING}" ruleName="UsingDirective"/>
       </action>
      </case>
     </switch>
     <action first="{USING}">
      <nonterminal first="{USING}" ruleName="UsingDeclaration"/>
     </action>
    </choice>
    <action first="{#, LPAREN, LBRACKET, LANGLE, SEMICOLON, COMMA, AMP, AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE, OPERATOR, ID, STAR, COLON_COLON, ASSIGN}">
     <nonterminal first="{#, LPAREN, LBRACKET, LANGLE, SEMICOLON, COMMA, AMP, AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE, OPERATOR, ID, STAR, COLON_COLON, ASSIGN}" ruleName="SimpleDeclaration"/>
    </action>
   </choice>
  </rule>
  <rule first="{#, LPAREN, LBRACKET, LANGLE, SEMICOLON, COMMA, AMP, AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE, OPERATOR, ID, STAR, COLON_COLON, ASSIGN}" name="SimpleDeclaration">
   <sequence first="{#, LPAREN, LBRACKET, LANGLE, SEMICOLON, COMMA, AMP, AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE, OPERATOR, ID, STAR, COLON_COLON, ASSIGN}">
    <sequence first="{#, LPAREN, LBRACKET, LANGLE, COMMA, AMP, AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE, OPERATOR, ID, STAR, COLON_COLON, ASSIGN}">
     <sequence first="{#, LANGLE, AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE, ID, COLON_COLON}">
      <action first="{#}">
       <empty first="{#}"/>
      </action>
      <optional first="{#, LANGLE, AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE, ID, COLON_COLON}">
       <group first="{#, LANGLE, AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE, ID, COLON_COLON}">
        <nonterminal first="{#, LANGLE, AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE, ID, COLON_COLON}" ruleName="DeclSpecifierSeq"/>
       </group>
      </optional>
     </sequence>
     <optional first="{#, LPAREN, LBRACKET, LANGLE, COMMA, AMP, OPERATOR, ID, STAR, COLON_COLON, ASSIGN}">
      <group first="{#, LPAREN, LBRACKET, LANGLE, COMMA, AMP, OPERATOR, ID, STAR, COLON_COLON, ASSIGN}">
       <action first="{#, LPAREN, LBRACKET, LANGLE, COMMA, AMP, OPERATOR, ID, STAR, COLON_COLON, ASSIGN}">
        <nonterminal first="{#, LPAREN, LBRACKET, LANGLE, COMMA, AMP, OPERATOR, ID, STAR, COLON_COLON, ASSIGN}" ruleName="InitDeclaratorList"/>
       </action>
      </group>
     </optional>
    </sequence>
    <action first="{SEMICOLON}">
     <token first="{SEMICOLON}" name="SEMICOLON"/>
    </action>
   </sequence>
  </rule>
  <rule first="{#, LANGLE, AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE, ID, COLON_COLON}" name="DeclSpecifierSeq">
   <group first="{#, LANGLE, AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE, ID, COLON_COLON}">
    <choice first="{#, LANGLE, AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE, ID, COLON_COLON}">
     <positive first="{AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE}">
      <group first="{AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE}">
       <action first="{AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE}">
        <nonterminal first="{AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE}" ruleName="DeclSpecifier"/>
       </action>
      </group>
     </positive>
     <action first="{#, LANGLE, ID, COLON_COLON}">
      <nonterminal first="{#, LANGLE, ID, COLON_COLON}" ruleName="TypeName"/>
     </action>
    </choice>
   </group>
  </rule>
  <rule first="{AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE}" name="DeclSpecifier">
   <switch first="{AUTO, REGISTER, STATIC, EXTERN, MUTABLE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPEDEF, CONST, VOLATILE}">
    <case first="{AUTO, REGISTER, STATIC, EXTERN, MUTABLE}">
     <action first="{AUTO, REGISTER, STATIC, EXTERN, MUTABLE}">
      <nonterminal first="{AUTO, REGISTER, STATIC, EXTERN, MUTABLE}" ruleName="StorageClassSpecifier"/>
     </action>
    </case>
    <case first="{CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE}">
     <action first="{CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE}">
      <nonterminal first="{CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE}" ruleName="TypeSpecifier"/>
     </action>
    </case>
    <case first="{TYPEDEF}">
     <action first="{TYPEDEF}">
      <nonterminal first="{TYPEDEF}" ruleName="Typedef"/>
     </action>
    </case>
   </switch>
  </rule>
  <rule first="{AUTO, REGISTER, STATIC, EXTERN, MUTABLE}" name="StorageClassSpecifier">
   <switch first="{AUTO, REGISTER, STATIC, EXTERN, MUTABLE}">
    <case first="{AUTO}">
     <action first="{AUTO}">
      <token first="{AUTO}" name="AUTO"/>
     </action>
    </case>
    <case first="{REGISTER}">
     <action first="{REGISTER}">
      <token first="{REGISTER}" name="REGISTER"/>
     </action>
    </case>
    <case first="{STATIC}">
     <action first="{STATIC}">
      <token first="{STATIC}" name="STATIC"/>
     </action>
    </case>
    <case first="{EXTERN}">
     <action first="{EXTERN}">
      <token first="{EXTERN}" name="EXTERN"/>
     </action>
    </case>
    <case first="{MUTABLE}">
     <action first="{MUTABLE}">
      <token first="{MUTABLE}" name="MUTABLE"/>
     </action>
    </case>
   </switch>
  </rule>
  <rule first="{CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE}" name="TypeSpecifier">
   <switch first="{CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE}">
    <case first="{CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID}">
     <action first="{CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID}">
      <nonterminal first="{CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID}" ruleName="SimpleTypeSpecifier"/>
     </action>
    </case>
    <case first="{CONST, VOLATILE}">
     <action first="{CONST, VOLATILE}">
      <nonterminal first="{CONST, VOLATILE}" ruleName="CVQualifier"/>
     </action>
    </case>
   </switch>
  </rule>
  <rule first="{CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID}" name="SimpleTypeSpecifier">
   <switch first="{CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID}">
    <case first="{CHAR}">
     <action first="{CHAR}">
      <token first="{CHAR}" name="CHAR"/>
     </action>
    </case>
    <case first="{CHAR8T}">
     <action first="{CHAR8T}">
      <token first="{CHAR8T}" name="CHAR8T"/>
     </action>
    </case>
    <case first="{CHAR16T}">
     <action first="{CHAR16T}">
      <token first="{CHAR16T}" name="CHAR16T"/>
     </action>
    </case>
    <case first="{CHAR32T}">
     <action first="{CHAR32T}">
      <token first="{CHAR32T}" name="CHAR32T"/>
     </action>
    </case>
    <case first="{WCHART}">
     <action first="{WCHART}">
      <token first="{WCHART}" name="WCHART"/>
     </action>
    </case>
    <case first="{BOOL}">
     <action first="{BOOL}">
      <token first="{BOOL}" name="BOOL"/>
     </action>
    </case>
    <case first="{SHORT}">
     <action first="{SHORT}">
      <token first="{SHORT}" name="SHORT"/>
     </action>
    </case>
    <case first="{INT}">
     <action first="{INT}">
      <token first="{INT}" name="INT"/>
     </action>
    </case>
    <case first="{LONG}">
     <action first="{LONG}">
      <token first="{LONG}" name="LONG"/>
     </action>
    </case>
    <case first="{SIGNED}">
     <action first="{SIGNED}">
      <token first="{SIGNED}" name="SIGNED"/>
     </action>
    </case>
    <case first="{UNSIGNED}">
     <action first="{UNSIGNED}">
      <token first="{UNSIGNED}" name="UNSIGNED"/>
     </action>
    </case>
    <case first="{FLOAT}">
     <action first="{FLOAT}">
      <token first="{FLOAT}" name="FLOAT"/>
     </action>
    </case>
    <case first="{DOUBLE}">
     <action first="{DOUBLE}">
      <token first="{DOUBLE}" name="DOUBLE"/>
     </action>
    </case>
    <case first="{VOID}">
     <action first="{VOID}">
      <token first="{VOID}" name="VOID"/>
     </action>
    </case>
   </switch>
  </rule>
  <rule first="{#, LANGLE, ID, COLON_COLON}" name="TypeName">
   <action first="{#, LANGLE, ID, COLON_COLON}">
    <group first="{#, LANGLE, ID, COLON_COLON}">
     <sequence first="{#, LANGLE, ID, COLON_COLON}">
      <action first="{#, ID, COLON_COLON}">
       <nonterminal first="{#, ID, COLON_COLON}" ruleName="QualifiedCppId"/>
      </action>
      <optional first="{#, LANGLE}">
       <group first="{LANGLE}">
        <sequence first="{LANGLE}">
         <sequence first="{LANGLE}">
          <action first="{LANGLE}">
           <token first="{LANGLE}" name="LANGLE"/>
          </action>
          <nonterminal first="{#, DOT, LPAREN, LBRACKET, LANGLE, RANGLE, COMMA, ARROW, QUEST, AMP, EXCLAMATION, TILDE, CARET, PIPE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE, SIZEOF, OPERATOR, DYNAMIC_CAST, STATIC_CAST, REINTERPRET_CAST, CONST_CAST, TYPEID, THIS, NEW, DELETE, TRUE, FALSE, NULLPTR, ID, INTEGER_LITERAL, FLOATING_LITERAL, CHAR_LITERAL, STRING_LITERAL, DISJUNCTION, AMP_AMP, DOT_STAR, ARROW_STAR, EQ, NEQ, LEQ, GEQ, SHIFT_LEFT, SHIFT_RIGHT, PLUS, MINUS, STAR, DIV, REM, PLUS_PLUS, MINUS_MINUS, COLON_COLON, ASSIGN, MUL_ASSIGN, DIV_ASSIGN, REM_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN}" ruleName="TemplateArgumentList"/>
         </sequence>
         <action first="{RANGLE}">
          <token first="{RANGLE}" name="RANGLE"/>
         </action>
        </sequence>
       </group>
      </optional>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{#, DOT, LPAREN, LBRACKET, LANGLE, RANGLE, COMMA, ARROW, QUEST, AMP, EXCLAMATION, TILDE, CARET, PIPE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE, SIZEOF, OPERATOR, DYNAMIC_CAST, STATIC_CAST, REINTERPRET_CAST, CONST_CAST, TYPEID, THIS, NEW, DELETE, TRUE, FALSE, NULLPTR, ID, INTEGER_LITERAL, FLOATING_LITERAL, CHAR_LITERAL, STRING_LITERAL, DISJUNCTION, AMP_AMP, DOT_STAR, ARROW_STAR, EQ, NEQ, LEQ, GEQ, SHIFT_LEFT, SHIFT_RIGHT, PLUS, MINUS, STAR, DIV, REM, PLUS_PLUS, MINUS_MINUS, COLON_COLON, ASSIGN, MUL_ASSIGN, DIV_ASSIGN, REM_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN}" name="TemplateArgumentList">
   <list first="{#, DOT, LPAREN, LBRACKET, LANGLE, RANGLE, COMMA, ARROW, QUEST, AMP, EXCLAMATION, TILDE, CARET, PIPE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE, SIZEOF, OPERATOR, DYNAMIC_CAST, STATIC_CAST, REINTERPRET_CAST, CONST_CAST, TYPEID, THIS, NEW, DELETE, TRUE, FALSE, NULLPTR, ID, INTEGER_LITERAL, FLOATING_LITERAL, CHAR_LITERAL, STRING_LITERAL, DISJUNCTION, AMP_AMP, DOT_STAR, ARROW_STAR, EQ, NEQ, LEQ, GEQ, SHIFT_LEFT, SHIFT_RIGHT, PLUS, MINUS, STAR, DIV, REM, PLUS_PLUS, MINUS_MINUS, COLON_COLON, ASSIGN, MUL_ASSIGN, DIV_ASSIGN, REM_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN}">
    <sequence first="{#, DOT, LPAREN, LBRACKET, LANGLE, RANGLE, COMMA, ARROW, QUEST, AMP, EXCLAMATION, TILDE, CARET, PIPE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE, SIZEOF, OPERATOR, DYNAMIC_CAST, STATIC_CAST, REINTERPRET_CAST, CONST_CAST, TYPEID, THIS, NEW, DELETE, TRUE, FALSE, NULLPTR, ID, INTEGER_LITERAL, FLOATING_LITERAL, CHAR_LITERAL, STRING_LITERAL, DISJUNCTION, AMP_AMP, DOT_STAR, ARROW_STAR, EQ, NEQ, LEQ, GEQ, SHIFT_LEFT, SHIFT_RIGHT, PLUS, MINUS, STAR, DIV, REM, PLUS_PLUS, MINUS_MINUS, COLON_COLON, ASSIGN, MUL_ASSIGN, DIV_ASSIGN, REM_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN}">
     <action first="{#, DOT, LPAREN, LBRACKET, LANGLE, RANGLE, ARROW, QUEST, AMP, EXCLAMATION, TILDE, CARET, PIPE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE, SIZEOF, OPERATOR, DYNAMIC_CAST, STATIC_CAST, REINTERPRET_CAST, CONST_CAST, TYPEID, THIS, NEW, DELETE, TRUE, FALSE, NULLPTR, ID, INTEGER_LITERAL, FLOATING_LITERAL, CHAR_LITERAL, STRING_LITERAL, DISJUNCTION, AMP_AMP, DOT_STAR, ARROW_STAR, EQ, NEQ, LEQ, GEQ, SHIFT_LEFT, SHIFT_RIGHT, PLUS, MINUS, STAR, DIV, REM, PLUS_PLUS, MINUS_MINUS, COLON_COLON, ASSIGN, MUL_ASSIGN, DIV_ASSIGN, REM_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN}">
      <nonterminal first="{#, DOT, LPAREN, LBRACKET, LANGLE, RANGLE, ARROW, QUEST, AMP, EXCLAMATION, TILDE, CARET, PIPE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE, SIZEOF, OPERATOR, DYNAMIC_CAST, STATIC_CAST, REINTERPRET_CAST, CONST_CAST, TYPEID, THIS, NEW, DELETE, TRUE, FALSE, NULLPTR, ID, INTEGER_LITERAL, FLOATING_LITERAL, CHAR_LITERAL, STRING_LITERAL, DISJUNCTION, AMP_AMP, DOT_STAR, ARROW_STAR, EQ, NEQ, LEQ, GEQ, SHIFT_LEFT, SHIFT_RIGHT, PLUS, MINUS, STAR, DIV, REM, PLUS_PLUS, MINUS_MINUS, COLON_COLON, ASSIGN, MUL_ASSIGN, DIV_ASSIGN, REM_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN}" ruleName="TemplateArgument"/>
     </action>
     <kleene first="{#, COMMA}">
      <sequence first="{COMMA}">
       <token first="{COMMA}" name="COMMA"/>
       <action first="{#, DOT, LPAREN, LBRACKET, LANGLE, RANGLE, ARROW, QUEST, AMP, EXCLAMATION, TILDE, CARET, PIPE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE, SIZEOF, OPERATOR, DYNAMIC_CAST, STATIC_CAST, REINTERPRET_CAST, CONST_CAST, TYPEID, THIS, NEW, DELETE, TRUE, FALSE, NULLPTR, ID, INTEGER_LITERAL, FLOATING_LITERAL, CHAR_LITERAL, STRING_LITERAL, DISJUNCTION, AMP_AMP, DOT_STAR, ARROW_STAR, EQ, NEQ, LEQ, GEQ, SHIFT_LEFT, SHIFT_RIGHT, PLUS, MINUS, STAR, DIV, REM, PLUS_PLUS, MINUS_MINUS, COLON_COLON, ASSIGN, MUL_ASSIGN, DIV_ASSIGN, REM_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN}">
        <nonterminal first="{#, DOT, LPAREN, LBRACKET, LANGLE, RANGLE, ARROW, QUEST, AMP, EXCLAMATION, TILDE, CARET, PIPE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE, SIZEOF, OPERATOR, DYNAMIC_CAST, STATIC_CAST, REINTERPRET_CAST, CONST_CAST, TYPEID, THIS, NEW, DELETE, TRUE, FALSE, NULLPTR, ID, INTEGER_LITERAL, FLOATING_LITERAL, CHAR_LITERAL, STRING_LITERAL, DISJUNCTION, AMP_AMP, DOT_STAR, ARROW_STAR, EQ, NEQ, LEQ, GEQ, SHIFT_LEFT, SHIFT_RIGHT, PLUS, MINUS, STAR, DIV, REM, PLUS_PLUS, MINUS_MINUS, COLON_COLON, ASSIGN, MUL_ASSIGN, DIV_ASSIGN, REM_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN}" ruleName="TemplateArgument"/>
       </action>
      </sequence>
     </kleene>
    </sequence>
   </list>
  </rule>
  <rule first="{#, DOT, LPAREN, LBRACKET, LANGLE, RANGLE, ARROW, QUEST, AMP, EXCLAMATION, TILDE, CARET, PIPE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE, SIZEOF, OPERATOR, DYNAMIC_CAST, STATIC_CAST, REINTERPRET_CAST, CONST_CAST, TYPEID, THIS, NEW, DELETE, TRUE, FALSE, NULLPTR, ID, INTEGER_LITERAL, FLOATING_LITERAL, CHAR_LITERAL, STRING_LITERAL, DISJUNCTION, AMP_AMP, DOT_STAR, ARROW_STAR, EQ, NEQ, LEQ, GEQ, SHIFT_LEFT, SHIFT_RIGHT, PLUS, MINUS, STAR, DIV, REM, PLUS_PLUS, MINUS_MINUS, COLON_COLON, ASSIGN, MUL_ASSIGN, DIV_ASSIGN, REM_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN}" name="TemplateArgument">
   <choice first="{#, DOT, LPAREN, LBRACKET, LANGLE, RANGLE, ARROW, QUEST, AMP, EXCLAMATION, TILDE, CARET, PIPE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE, SIZEOF, OPERATOR, DYNAMIC_CAST, STATIC_CAST, REINTERPRET_CAST, CONST_CAST, TYPEID, THIS, NEW, DELETE, TRUE, FALSE, NULLPTR, ID, INTEGER_LITERAL, FLOATING_LITERAL, CHAR_LITERAL, STRING_LITERAL, DISJUNCTION, AMP_AMP, DOT_STAR, ARROW_STAR, EQ, NEQ, LEQ, GEQ, SHIFT_LEFT, SHIFT_RIGHT, PLUS, MINUS, STAR, DIV, REM, PLUS_PLUS, MINUS_MINUS, COLON_COLON, ASSIGN, MUL_ASSIGN, DIV_ASSIGN, REM_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN}">
    <action first="{#, LPAREN, LBRACKET, LANGLE, AMP, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE, ID, STAR, COLON_COLON}">
     <nonterminal first="{#, LPAREN, LBRACKET, LANGLE, AMP, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE, ID, STAR, COLON_COLON}" ruleName="TypeId"/>
    </action>
    <action first="{#, DOT, LPAREN, LBRACKET, LANGLE, RANGLE, ARROW, QUEST, AMP, EXCLAMATION, TILDE, CARET, PIPE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE, SIZEOF, OPERATOR, DYNAMIC_CAST, STATIC_CAST, REINTERPRET_CAST, CONST_CAST, TYPEID, THIS, NEW, DELETE, TRUE, FALSE, NULLPTR, ID, INTEGER_LITERAL, FLOATING_LITERAL, CHAR_LITERAL, STRING_LITERAL, DISJUNCTION, AMP_AMP, DOT_STAR, ARROW_STAR, EQ, NEQ, LEQ, GEQ, SHIFT_LEFT, SHIFT_RIGHT, PLUS, MINUS, STAR, DIV, REM, PLUS_PLUS, MINUS_MINUS, COLON_COLON, ASSIGN, MUL_ASSIGN, DIV_ASSIGN, REM_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN}">
     <nonterminal first="{#, DOT, LPAREN, LBRACKET, LANGLE, RANGLE, ARROW, QUEST, AMP, EXCLAMATION, TILDE, CARET, PIPE, CHAR, CHAR8T, CHAR16T, CHAR32T, WCHART, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, CONST, VOLATILE, SIZEOF, OPERATOR, DYNAMIC_CAST, STATIC_CAST, REINTERPRET_CAST, CONST_CAST, TYPEID, THIS, NEW, DELETE, TRUE, FALSE, NULLPTR, ID, INTEGER_LITERAL, FLOATING_LITERAL, CHAR_LITERAL, STRING_LITERAL, DISJUNCTION, AMP_AMP, DOT_STAR, ARROW_STAR, EQ, NEQ, LEQ, GEQ, SHIFT_LEFT, SHIFT_RIGHT, PLUS, MINUS, STAR, DIV, REM, PLUS_PLUS, MINUS_MINUS, COLON_COLON, ASSIGN, MUL_ASSIGN, DIV_ASSIGN, REM_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, SHIFT_LEFT_ASSIGN, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN}" ruleName="AssignmentExpression"/>
    </action>
   </choice>
  </rule>
  <rule first="{TYPEDEF}" name="Typedef">
   <action first="{TYPEDEF}">
    <token first="{TYPEDEF}" name="TYPEDEF"/>
   </action>
  </rule>
  <rule first="{CONST, VOLATILE}" name="CVQualifier">
   <switch first="{CONST, VOLATILE}">
    <case first="{CONST}">
     <action first="{CONST}">
      <token first="{CONST}" name="CONST"/>
     </action>
    </case>
    <case first="{VOLATILE}">
     <action first="{VOLATILE}">
      <token first="{VOLATILE}" name="VOLATILE"/>
     </action>
    </case>
   </switch>
  </rule>
  <rule first="{NAMESPACE}" name="NamespaceAliasDefinition">
   <action first="{NAMESPACE}">
    <group first="{NAMESPACE}">
     <sequence first="{NAMESPACE}">
      <sequence first="{NAMESPACE}">
       <sequence first="{NAMESPACE}">
        <sequence first="{NAMESPACE}">
         <token first="{NAMESPACE}" name="NAMESPACE"/>
         <nonterminal first="{ID}" ruleName="CppIdentifier"/>
        </sequence>
        <token first="{ASSIGN}" name="ASSIGN"/>
       </sequence>
       <nonterminal first="{#, ID, COLON_COLON}" ruleName="QualifiedCppId"/>
      </sequence>
      <token first="{SEMICOLON}" name="SEMICOLON"/>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{USING}" name="UsingDeclaration">
   <sequence first="{USING}">
    <sequence first="{USING}">
     <token first="{USING}" name="USING"/>
     <nonterminal first="{#, ID, COLON_COLON}" ruleName="QualifiedCppId"/>
    </sequence>
    <action first="{SEMICOLON}">
     <token first="{SEMICOLON}" name="SEMICOLON"/>
    </action>
   </sequence>
  </rule>
  <rule first="{USING}" name="UsingDirective">
   <sequence first="{USING}">
    <sequence first="{USING}">
     <sequence first="{USING}">
      <token first="{USING}" name="USING"/>
      <token first="{NAMESPACE}" name="NAMESPACE"/>
     </sequence>
     <nonterminal first="{#, ID, COLON_COLON}" ruleName="QualifiedCppId"/>
    </sequence>
    <action first="{SEMICOLON}">
     <token first="{SEMICOLON}" name="SEMICOLON"/>
    </action>
   </sequence>
  </rule>
 </grammar>
</parserFile>
