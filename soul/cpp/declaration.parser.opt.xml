<parserFile>
 <grammar name="DeclarationParser">
  <rule first="{#, #, #, #, AUTO, STAR, COLON_COLON, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, ID, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, NAMESPACE, OPERATOR, USING, CHAR8T, FLOAT, LONG, AMP, SEMICOLON}" name="BlockDeclaration">
   <choice first="{#, #, #, #, AUTO, STAR, COLON_COLON, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, ID, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, NAMESPACE, OPERATOR, USING, CHAR8T, FLOAT, LONG, AMP, SEMICOLON}">
    <choice first="{NAMESPACE, USING}">
     <switch first="{NAMESPACE, USING}">
      <case first="{NAMESPACE}">
       <action first="{NAMESPACE}">
        <nonterminal first="{NAMESPACE}" ruleName="NamespaceAliasDefinition"/>
       </action>
      </case>
      <case first="{USING}">
       <action first="{USING}">
        <nonterminal first="{USING}" ruleName="UsingDirective"/>
       </action>
      </case>
     </switch>
     <action first="{USING}">
      <nonterminal first="{USING}" ruleName="UsingDeclaration"/>
     </action>
    </choice>
    <action first="{#, #, #, #, AUTO, STAR, COLON_COLON, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, ID, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, OPERATOR, CHAR8T, FLOAT, LONG, AMP, SEMICOLON}">
     <nonterminal first="{#, #, #, #, AUTO, STAR, COLON_COLON, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, ID, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, OPERATOR, CHAR8T, FLOAT, LONG, AMP, SEMICOLON}" ruleName="SimpleDeclaration"/>
    </action>
   </choice>
  </rule>
  <rule first="{#, #, #, #, AUTO, STAR, COLON_COLON, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, ID, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, OPERATOR, CHAR8T, FLOAT, LONG, AMP, SEMICOLON}" name="SimpleDeclaration">
   <sequence first="{#, #, #, #, AUTO, STAR, COLON_COLON, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, ID, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, OPERATOR, CHAR8T, FLOAT, LONG, AMP, SEMICOLON}">
    <sequence first="{#, #, #, #, AUTO, STAR, COLON_COLON, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, ID, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, OPERATOR, CHAR8T, FLOAT, LONG, AMP}">
     <sequence first="{#, #, AUTO, COLON_COLON, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, ID, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}">
      <action first="{#}">
       <empty first="{#}"/>
      </action>
      <optional first="{#, #, AUTO, COLON_COLON, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, ID, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}">
       <group first="{#, AUTO, COLON_COLON, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, ID, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}">
        <nonterminal first="{#, AUTO, COLON_COLON, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, ID, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}" ruleName="DeclSpecifierSeq"/>
       </group>
      </optional>
     </sequence>
     <optional first="{#, #, #, #, STAR, COLON_COLON, ID, OPERATOR, AMP}">
      <group first="{#, #, #, STAR, COLON_COLON, ID, OPERATOR, AMP}">
       <action first="{#, #, #, STAR, COLON_COLON, ID, OPERATOR, AMP}">
        <nonterminal first="{#, #, #, STAR, COLON_COLON, ID, OPERATOR, AMP}" ruleName="InitDeclaratorList"/>
       </action>
      </group>
     </optional>
    </sequence>
    <action first="{SEMICOLON}">
     <token first="{SEMICOLON}" name="SEMICOLON"/>
    </action>
   </sequence>
  </rule>
  <rule first="{#, AUTO, COLON_COLON, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, ID, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}" name="DeclSpecifierSeq">
   <group first="{#, AUTO, COLON_COLON, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, ID, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}">
    <switch first="{#, AUTO, COLON_COLON, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, ID, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}">
     <case first="{AUTO, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}">
      <positive first="{AUTO, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}">
       <group first="{AUTO, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}">
        <action first="{AUTO, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}">
         <nonterminal first="{AUTO, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}" ruleName="DeclSpecifier"/>
        </action>
       </group>
      </positive>
     </case>
     <case first="{#, COLON_COLON, ID}">
      <action first="{#, COLON_COLON, ID}">
       <nonterminal first="{#, COLON_COLON, ID}" ruleName="TypeName"/>
      </action>
     </case>
    </switch>
   </group>
  </rule>
  <rule first="{AUTO, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}" name="DeclSpecifier">
   <switch first="{AUTO, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, VOID, EXTERN, CONST, REGISTER, DOUBLE, INT, MUTABLE, BOOL, SIGNED, STATIC, TYPEDEF, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}">
    <case first="{AUTO, EXTERN, REGISTER, MUTABLE, STATIC}">
     <action first="{AUTO, EXTERN, REGISTER, MUTABLE, STATIC}">
      <nonterminal first="{AUTO, EXTERN, REGISTER, MUTABLE, STATIC}" ruleName="StorageClassSpecifier"/>
     </action>
    </case>
    <case first="{CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, VOID, CONST, DOUBLE, INT, BOOL, SIGNED, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}">
     <action first="{CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, VOID, CONST, DOUBLE, INT, BOOL, SIGNED, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}">
      <nonterminal first="{CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, VOID, CONST, DOUBLE, INT, BOOL, SIGNED, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}" ruleName="TypeSpecifier"/>
     </action>
    </case>
    <case first="{TYPEDEF}">
     <action first="{TYPEDEF}">
      <nonterminal first="{TYPEDEF}" ruleName="Typedef"/>
     </action>
    </case>
   </switch>
  </rule>
  <rule first="{AUTO, EXTERN, REGISTER, MUTABLE, STATIC}" name="StorageClassSpecifier">
   <switch first="{AUTO, EXTERN, REGISTER, MUTABLE, STATIC}">
    <case first="{AUTO}">
     <action first="{AUTO}">
      <token first="{AUTO}" name="AUTO"/>
     </action>
    </case>
    <case first="{REGISTER}">
     <action first="{REGISTER}">
      <token first="{REGISTER}" name="REGISTER"/>
     </action>
    </case>
    <case first="{STATIC}">
     <action first="{STATIC}">
      <token first="{STATIC}" name="STATIC"/>
     </action>
    </case>
    <case first="{EXTERN}">
     <action first="{EXTERN}">
      <token first="{EXTERN}" name="EXTERN"/>
     </action>
    </case>
    <case first="{MUTABLE}">
     <action first="{MUTABLE}">
      <token first="{MUTABLE}" name="MUTABLE"/>
     </action>
    </case>
   </switch>
  </rule>
  <rule first="{CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, VOID, CONST, DOUBLE, INT, BOOL, SIGNED, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}" name="TypeSpecifier">
   <switch first="{CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, VOID, CONST, DOUBLE, INT, BOOL, SIGNED, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}">
    <case first="{CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, VOID, DOUBLE, INT, BOOL, SIGNED, WCHART, CHAR8T, FLOAT, LONG}">
     <action first="{CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, VOID, DOUBLE, INT, BOOL, SIGNED, WCHART, CHAR8T, FLOAT, LONG}">
      <nonterminal first="{CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, VOID, DOUBLE, INT, BOOL, SIGNED, WCHART, CHAR8T, FLOAT, LONG}" ruleName="SimpleTypeSpecifier"/>
     </action>
    </case>
    <case first="{CONST, VOLATILE}">
     <action first="{CONST, VOLATILE}">
      <nonterminal first="{CONST, VOLATILE}" ruleName="CVQualifier"/>
     </action>
    </case>
   </switch>
  </rule>
  <rule first="{CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, VOID, DOUBLE, INT, BOOL, SIGNED, WCHART, CHAR8T, FLOAT, LONG}" name="SimpleTypeSpecifier">
   <switch first="{CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, VOID, DOUBLE, INT, BOOL, SIGNED, WCHART, CHAR8T, FLOAT, LONG}">
    <case first="{CHAR}">
     <action first="{CHAR}">
      <token first="{CHAR}" name="CHAR"/>
     </action>
    </case>
    <case first="{CHAR8T}">
     <action first="{CHAR8T}">
      <token first="{CHAR8T}" name="CHAR8T"/>
     </action>
    </case>
    <case first="{CHAR16T}">
     <action first="{CHAR16T}">
      <token first="{CHAR16T}" name="CHAR16T"/>
     </action>
    </case>
    <case first="{CHAR32T}">
     <action first="{CHAR32T}">
      <token first="{CHAR32T}" name="CHAR32T"/>
     </action>
    </case>
    <case first="{WCHART}">
     <action first="{WCHART}">
      <token first="{WCHART}" name="WCHART"/>
     </action>
    </case>
    <case first="{BOOL}">
     <action first="{BOOL}">
      <token first="{BOOL}" name="BOOL"/>
     </action>
    </case>
    <case first="{SHORT}">
     <action first="{SHORT}">
      <token first="{SHORT}" name="SHORT"/>
     </action>
    </case>
    <case first="{INT}">
     <action first="{INT}">
      <token first="{INT}" name="INT"/>
     </action>
    </case>
    <case first="{LONG}">
     <action first="{LONG}">
      <token first="{LONG}" name="LONG"/>
     </action>
    </case>
    <case first="{SIGNED}">
     <action first="{SIGNED}">
      <token first="{SIGNED}" name="SIGNED"/>
     </action>
    </case>
    <case first="{UNSIGNED}">
     <action first="{UNSIGNED}">
      <token first="{UNSIGNED}" name="UNSIGNED"/>
     </action>
    </case>
    <case first="{FLOAT}">
     <action first="{FLOAT}">
      <token first="{FLOAT}" name="FLOAT"/>
     </action>
    </case>
    <case first="{DOUBLE}">
     <action first="{DOUBLE}">
      <token first="{DOUBLE}" name="DOUBLE"/>
     </action>
    </case>
    <case first="{VOID}">
     <action first="{VOID}">
      <token first="{VOID}" name="VOID"/>
     </action>
    </case>
   </switch>
  </rule>
  <rule first="{#, COLON_COLON, ID}" name="TypeName">
   <action first="{#, COLON_COLON, ID}">
    <group first="{#, COLON_COLON, ID}">
     <sequence first="{#, COLON_COLON, ID}">
      <action first="{#, COLON_COLON, ID}">
       <nonterminal first="{#, COLON_COLON, ID}" ruleName="QualifiedCppId"/>
      </action>
      <optional first="{#, LANGLE}">
       <group first="{LANGLE}">
        <sequence first="{LANGLE}">
         <sequence first="{LANGLE}">
          <action first="{LANGLE}">
           <token first="{LANGLE}" name="LANGLE"/>
          </action>
          <nonterminal first="{#, #, #, XOR_ASSIGN, SHIFT_LEFT_ASSIGN, OR_ASSIGN, DOT_STAR, ARROW_STAR, EQ, STAR, GEQ, NEQ, DIV, PLUS_PLUS, AMP_AMP, DIV_ASSIGN, MUL_ASSIGN, MINUS_MINUS, REM_ASSIGN, PLUS_ASSIGN, DISJUNCTION, SHIFT_RIGHT, MINUS_ASSIGN, COLON_COLON, SHIFT_LEFT, PLUS, REM, ASSIGN, MINUS, LEQ, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, SIZEOF, CHAR, UNSIGNED, FLOATING_LITERAL, CHAR_LITERAL, SHORT, DYNAMIC_CAST, DOT, REINTERPRET_CAST, CHAR16T, DELETE, CHAR32T, ID, NEW, VOID, CONST, CONST_CAST, TYPEID, THIS, NULLPTR, INTEGER_LITERAL, DOUBLE, TRUE, INT, STRING_LITERAL, LPAREN, STATIC_CAST, BOOL, SIGNED, WCHART, VOLATILE, FALSE, OPERATOR, CHAR8T, FLOAT, LONG, AMP, PIPE, QUEST, TILDE, CARET, ARROW, EXCLAMATION, RANGLE, LBRACKET, LANGLE}" ruleName="TemplateArgumentList"/>
         </sequence>
         <action first="{RANGLE}">
          <token first="{RANGLE}" name="RANGLE"/>
         </action>
        </sequence>
       </group>
      </optional>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{#, #, #, XOR_ASSIGN, SHIFT_LEFT_ASSIGN, OR_ASSIGN, DOT_STAR, ARROW_STAR, EQ, STAR, GEQ, NEQ, DIV, PLUS_PLUS, AMP_AMP, DIV_ASSIGN, MUL_ASSIGN, MINUS_MINUS, REM_ASSIGN, PLUS_ASSIGN, DISJUNCTION, SHIFT_RIGHT, MINUS_ASSIGN, COLON_COLON, SHIFT_LEFT, PLUS, REM, ASSIGN, MINUS, LEQ, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, SIZEOF, CHAR, UNSIGNED, FLOATING_LITERAL, CHAR_LITERAL, SHORT, DYNAMIC_CAST, DOT, REINTERPRET_CAST, CHAR16T, DELETE, CHAR32T, ID, NEW, VOID, CONST, CONST_CAST, TYPEID, THIS, NULLPTR, INTEGER_LITERAL, DOUBLE, TRUE, INT, STRING_LITERAL, LPAREN, STATIC_CAST, BOOL, SIGNED, WCHART, VOLATILE, FALSE, OPERATOR, CHAR8T, FLOAT, LONG, AMP, PIPE, QUEST, TILDE, CARET, ARROW, EXCLAMATION, RANGLE, LBRACKET, LANGLE}" name="TemplateArgumentList">
   <list first="{#, #, #, XOR_ASSIGN, SHIFT_LEFT_ASSIGN, OR_ASSIGN, DOT_STAR, ARROW_STAR, EQ, STAR, GEQ, NEQ, DIV, PLUS_PLUS, AMP_AMP, DIV_ASSIGN, MUL_ASSIGN, MINUS_MINUS, REM_ASSIGN, PLUS_ASSIGN, DISJUNCTION, SHIFT_RIGHT, MINUS_ASSIGN, COLON_COLON, SHIFT_LEFT, PLUS, REM, ASSIGN, MINUS, LEQ, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, SIZEOF, CHAR, UNSIGNED, FLOATING_LITERAL, CHAR_LITERAL, SHORT, DYNAMIC_CAST, DOT, REINTERPRET_CAST, CHAR16T, DELETE, CHAR32T, ID, NEW, VOID, CONST, CONST_CAST, TYPEID, THIS, NULLPTR, INTEGER_LITERAL, DOUBLE, TRUE, INT, STRING_LITERAL, LPAREN, STATIC_CAST, BOOL, SIGNED, WCHART, VOLATILE, FALSE, OPERATOR, CHAR8T, FLOAT, LONG, AMP, PIPE, QUEST, TILDE, CARET, ARROW, EXCLAMATION, RANGLE, LBRACKET, LANGLE}">
    <sequence first="{#, #, #, XOR_ASSIGN, SHIFT_LEFT_ASSIGN, OR_ASSIGN, DOT_STAR, ARROW_STAR, EQ, STAR, GEQ, NEQ, DIV, PLUS_PLUS, AMP_AMP, DIV_ASSIGN, MUL_ASSIGN, MINUS_MINUS, REM_ASSIGN, PLUS_ASSIGN, DISJUNCTION, SHIFT_RIGHT, MINUS_ASSIGN, COLON_COLON, SHIFT_LEFT, PLUS, REM, ASSIGN, MINUS, LEQ, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, SIZEOF, CHAR, UNSIGNED, FLOATING_LITERAL, CHAR_LITERAL, SHORT, DYNAMIC_CAST, DOT, REINTERPRET_CAST, CHAR16T, DELETE, CHAR32T, ID, NEW, VOID, CONST, CONST_CAST, TYPEID, THIS, NULLPTR, INTEGER_LITERAL, DOUBLE, TRUE, INT, STRING_LITERAL, LPAREN, STATIC_CAST, BOOL, SIGNED, WCHART, VOLATILE, FALSE, OPERATOR, CHAR8T, FLOAT, LONG, AMP, PIPE, QUEST, TILDE, CARET, ARROW, EXCLAMATION, RANGLE, LBRACKET, LANGLE}">
     <action first="{#, #, #, XOR_ASSIGN, SHIFT_LEFT_ASSIGN, OR_ASSIGN, DOT_STAR, ARROW_STAR, EQ, STAR, GEQ, NEQ, DIV, PLUS_PLUS, AMP_AMP, DIV_ASSIGN, MUL_ASSIGN, MINUS_MINUS, REM_ASSIGN, PLUS_ASSIGN, DISJUNCTION, SHIFT_RIGHT, MINUS_ASSIGN, COLON_COLON, SHIFT_LEFT, PLUS, REM, ASSIGN, MINUS, LEQ, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, SIZEOF, CHAR, UNSIGNED, FLOATING_LITERAL, CHAR_LITERAL, SHORT, DYNAMIC_CAST, DOT, REINTERPRET_CAST, CHAR16T, DELETE, CHAR32T, ID, NEW, VOID, CONST, CONST_CAST, TYPEID, THIS, NULLPTR, INTEGER_LITERAL, DOUBLE, TRUE, INT, STRING_LITERAL, LPAREN, STATIC_CAST, BOOL, SIGNED, WCHART, VOLATILE, FALSE, OPERATOR, CHAR8T, FLOAT, LONG, AMP, PIPE, QUEST, TILDE, CARET, ARROW, EXCLAMATION, RANGLE, LBRACKET, LANGLE}">
      <nonterminal first="{#, #, #, XOR_ASSIGN, SHIFT_LEFT_ASSIGN, OR_ASSIGN, DOT_STAR, ARROW_STAR, EQ, STAR, GEQ, NEQ, DIV, PLUS_PLUS, AMP_AMP, DIV_ASSIGN, MUL_ASSIGN, MINUS_MINUS, REM_ASSIGN, PLUS_ASSIGN, DISJUNCTION, SHIFT_RIGHT, MINUS_ASSIGN, COLON_COLON, SHIFT_LEFT, PLUS, REM, ASSIGN, MINUS, LEQ, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, SIZEOF, CHAR, UNSIGNED, FLOATING_LITERAL, CHAR_LITERAL, SHORT, DYNAMIC_CAST, DOT, REINTERPRET_CAST, CHAR16T, DELETE, CHAR32T, ID, NEW, VOID, CONST, CONST_CAST, TYPEID, THIS, NULLPTR, INTEGER_LITERAL, DOUBLE, TRUE, INT, STRING_LITERAL, LPAREN, STATIC_CAST, BOOL, SIGNED, WCHART, VOLATILE, FALSE, OPERATOR, CHAR8T, FLOAT, LONG, AMP, PIPE, QUEST, TILDE, CARET, ARROW, EXCLAMATION, RANGLE, LBRACKET, LANGLE}" ruleName="TemplateArgument"/>
     </action>
     <kleene first="{#, COMMA}">
      <sequence first="{COMMA}">
       <token first="{COMMA}" name="COMMA"/>
       <action first="{#, #, #, XOR_ASSIGN, SHIFT_LEFT_ASSIGN, OR_ASSIGN, DOT_STAR, ARROW_STAR, EQ, STAR, GEQ, NEQ, DIV, PLUS_PLUS, AMP_AMP, DIV_ASSIGN, MUL_ASSIGN, MINUS_MINUS, REM_ASSIGN, PLUS_ASSIGN, DISJUNCTION, SHIFT_RIGHT, MINUS_ASSIGN, COLON_COLON, SHIFT_LEFT, PLUS, REM, ASSIGN, MINUS, LEQ, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, SIZEOF, CHAR, UNSIGNED, FLOATING_LITERAL, CHAR_LITERAL, SHORT, DYNAMIC_CAST, DOT, REINTERPRET_CAST, CHAR16T, DELETE, CHAR32T, ID, NEW, VOID, CONST, CONST_CAST, TYPEID, THIS, NULLPTR, INTEGER_LITERAL, DOUBLE, TRUE, INT, STRING_LITERAL, LPAREN, STATIC_CAST, BOOL, SIGNED, WCHART, VOLATILE, FALSE, OPERATOR, CHAR8T, FLOAT, LONG, AMP, PIPE, QUEST, TILDE, CARET, ARROW, EXCLAMATION, RANGLE, LBRACKET, LANGLE}">
        <nonterminal first="{#, #, #, XOR_ASSIGN, SHIFT_LEFT_ASSIGN, OR_ASSIGN, DOT_STAR, ARROW_STAR, EQ, STAR, GEQ, NEQ, DIV, PLUS_PLUS, AMP_AMP, DIV_ASSIGN, MUL_ASSIGN, MINUS_MINUS, REM_ASSIGN, PLUS_ASSIGN, DISJUNCTION, SHIFT_RIGHT, MINUS_ASSIGN, COLON_COLON, SHIFT_LEFT, PLUS, REM, ASSIGN, MINUS, LEQ, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, SIZEOF, CHAR, UNSIGNED, FLOATING_LITERAL, CHAR_LITERAL, SHORT, DYNAMIC_CAST, DOT, REINTERPRET_CAST, CHAR16T, DELETE, CHAR32T, ID, NEW, VOID, CONST, CONST_CAST, TYPEID, THIS, NULLPTR, INTEGER_LITERAL, DOUBLE, TRUE, INT, STRING_LITERAL, LPAREN, STATIC_CAST, BOOL, SIGNED, WCHART, VOLATILE, FALSE, OPERATOR, CHAR8T, FLOAT, LONG, AMP, PIPE, QUEST, TILDE, CARET, ARROW, EXCLAMATION, RANGLE, LBRACKET, LANGLE}" ruleName="TemplateArgument"/>
       </action>
      </sequence>
     </kleene>
    </sequence>
   </list>
  </rule>
  <rule first="{#, #, #, XOR_ASSIGN, SHIFT_LEFT_ASSIGN, OR_ASSIGN, DOT_STAR, ARROW_STAR, EQ, STAR, GEQ, NEQ, DIV, PLUS_PLUS, AMP_AMP, DIV_ASSIGN, MUL_ASSIGN, MINUS_MINUS, REM_ASSIGN, PLUS_ASSIGN, DISJUNCTION, SHIFT_RIGHT, MINUS_ASSIGN, COLON_COLON, SHIFT_LEFT, PLUS, REM, ASSIGN, MINUS, LEQ, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, SIZEOF, CHAR, UNSIGNED, FLOATING_LITERAL, CHAR_LITERAL, SHORT, DYNAMIC_CAST, DOT, REINTERPRET_CAST, CHAR16T, DELETE, CHAR32T, ID, NEW, VOID, CONST, CONST_CAST, TYPEID, THIS, NULLPTR, INTEGER_LITERAL, DOUBLE, TRUE, INT, STRING_LITERAL, LPAREN, STATIC_CAST, BOOL, SIGNED, WCHART, VOLATILE, FALSE, OPERATOR, CHAR8T, FLOAT, LONG, AMP, PIPE, QUEST, TILDE, CARET, ARROW, EXCLAMATION, RANGLE, LBRACKET, LANGLE}" name="TemplateArgument">
   <choice first="{#, #, #, XOR_ASSIGN, SHIFT_LEFT_ASSIGN, OR_ASSIGN, DOT_STAR, ARROW_STAR, EQ, STAR, GEQ, NEQ, DIV, PLUS_PLUS, AMP_AMP, DIV_ASSIGN, MUL_ASSIGN, MINUS_MINUS, REM_ASSIGN, PLUS_ASSIGN, DISJUNCTION, SHIFT_RIGHT, MINUS_ASSIGN, COLON_COLON, SHIFT_LEFT, PLUS, REM, ASSIGN, MINUS, LEQ, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, SIZEOF, CHAR, UNSIGNED, FLOATING_LITERAL, CHAR_LITERAL, SHORT, DYNAMIC_CAST, DOT, REINTERPRET_CAST, CHAR16T, DELETE, CHAR32T, ID, NEW, VOID, CONST, CONST_CAST, TYPEID, THIS, NULLPTR, INTEGER_LITERAL, DOUBLE, TRUE, INT, STRING_LITERAL, LPAREN, STATIC_CAST, BOOL, SIGNED, WCHART, VOLATILE, FALSE, OPERATOR, CHAR8T, FLOAT, LONG, AMP, PIPE, QUEST, TILDE, CARET, ARROW, EXCLAMATION, RANGLE, LBRACKET, LANGLE}">
    <action first="{#, #, COLON_COLON, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, ID, VOID, CONST, DOUBLE, INT, BOOL, SIGNED, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}">
     <nonterminal first="{#, #, COLON_COLON, CHAR, UNSIGNED, SHORT, CHAR16T, CHAR32T, ID, VOID, CONST, DOUBLE, INT, BOOL, SIGNED, WCHART, VOLATILE, CHAR8T, FLOAT, LONG}" ruleName="TypeId"/>
    </action>
    <action first="{#, #, XOR_ASSIGN, SHIFT_LEFT_ASSIGN, OR_ASSIGN, DOT_STAR, ARROW_STAR, EQ, STAR, GEQ, NEQ, DIV, PLUS_PLUS, AMP_AMP, DIV_ASSIGN, MUL_ASSIGN, MINUS_MINUS, REM_ASSIGN, PLUS_ASSIGN, DISJUNCTION, SHIFT_RIGHT, MINUS_ASSIGN, COLON_COLON, SHIFT_LEFT, PLUS, REM, ASSIGN, MINUS, LEQ, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, SIZEOF, CHAR, UNSIGNED, FLOATING_LITERAL, CHAR_LITERAL, SHORT, DYNAMIC_CAST, DOT, REINTERPRET_CAST, CHAR16T, DELETE, CHAR32T, ID, NEW, VOID, CONST, CONST_CAST, TYPEID, THIS, NULLPTR, INTEGER_LITERAL, DOUBLE, TRUE, INT, STRING_LITERAL, LPAREN, STATIC_CAST, BOOL, SIGNED, WCHART, VOLATILE, FALSE, OPERATOR, CHAR8T, FLOAT, LONG, AMP, PIPE, QUEST, TILDE, CARET, ARROW, EXCLAMATION, RANGLE, LBRACKET, LANGLE}">
     <nonterminal first="{#, #, XOR_ASSIGN, SHIFT_LEFT_ASSIGN, OR_ASSIGN, DOT_STAR, ARROW_STAR, EQ, STAR, GEQ, NEQ, DIV, PLUS_PLUS, AMP_AMP, DIV_ASSIGN, MUL_ASSIGN, MINUS_MINUS, REM_ASSIGN, PLUS_ASSIGN, DISJUNCTION, SHIFT_RIGHT, MINUS_ASSIGN, COLON_COLON, SHIFT_LEFT, PLUS, REM, ASSIGN, MINUS, LEQ, SHIFT_RIGHT_ASSIGN, AND_ASSIGN, SIZEOF, CHAR, UNSIGNED, FLOATING_LITERAL, CHAR_LITERAL, SHORT, DYNAMIC_CAST, DOT, REINTERPRET_CAST, CHAR16T, DELETE, CHAR32T, ID, NEW, VOID, CONST, CONST_CAST, TYPEID, THIS, NULLPTR, INTEGER_LITERAL, DOUBLE, TRUE, INT, STRING_LITERAL, LPAREN, STATIC_CAST, BOOL, SIGNED, WCHART, VOLATILE, FALSE, OPERATOR, CHAR8T, FLOAT, LONG, AMP, PIPE, QUEST, TILDE, CARET, ARROW, EXCLAMATION, RANGLE, LBRACKET, LANGLE}" ruleName="AssignmentExpression"/>
    </action>
   </choice>
  </rule>
  <rule first="{TYPEDEF}" name="Typedef">
   <action first="{TYPEDEF}">
    <token first="{TYPEDEF}" name="TYPEDEF"/>
   </action>
  </rule>
  <rule first="{CONST, VOLATILE}" name="CVQualifier">
   <switch first="{CONST, VOLATILE}">
    <case first="{CONST}">
     <action first="{CONST}">
      <token first="{CONST}" name="CONST"/>
     </action>
    </case>
    <case first="{VOLATILE}">
     <action first="{VOLATILE}">
      <token first="{VOLATILE}" name="VOLATILE"/>
     </action>
    </case>
   </switch>
  </rule>
  <rule first="{NAMESPACE}" name="NamespaceAliasDefinition">
   <action first="{NAMESPACE}">
    <group first="{NAMESPACE}">
     <sequence first="{NAMESPACE}">
      <sequence first="{NAMESPACE}">
       <sequence first="{NAMESPACE}">
        <sequence first="{NAMESPACE}">
         <token first="{NAMESPACE}" name="NAMESPACE"/>
         <nonterminal first="{ID}" ruleName="CppIdentifier"/>
        </sequence>
        <token first="{ASSIGN}" name="ASSIGN"/>
       </sequence>
       <nonterminal first="{#, COLON_COLON, ID}" ruleName="QualifiedCppId"/>
      </sequence>
      <token first="{SEMICOLON}" name="SEMICOLON"/>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{USING}" name="UsingDeclaration">
   <sequence first="{USING}">
    <sequence first="{USING}">
     <token first="{USING}" name="USING"/>
     <nonterminal first="{#, COLON_COLON, ID}" ruleName="QualifiedCppId"/>
    </sequence>
    <action first="{SEMICOLON}">
     <token first="{SEMICOLON}" name="SEMICOLON"/>
    </action>
   </sequence>
  </rule>
  <rule first="{USING}" name="UsingDirective">
   <sequence first="{USING}">
    <sequence first="{USING}">
     <sequence first="{USING}">
      <token first="{USING}" name="USING"/>
      <token first="{NAMESPACE}" name="NAMESPACE"/>
     </sequence>
     <nonterminal first="{#, COLON_COLON, ID}" ruleName="QualifiedCppId"/>
    </sequence>
    <action first="{SEMICOLON}">
     <token first="{SEMICOLON}" name="SEMICOLON"/>
    </action>
   </sequence>
  </rule>
 </grammar>
</parserFile>
