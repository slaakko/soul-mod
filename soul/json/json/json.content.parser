// =================================
// Copyright (c) 2023 Seppo Laakko
// Distributed under the MIT license
// =================================

export module soul.json.content.parser;

[interface]import util.json;
[implementation]import soul.json.lexer;
[implementation]import soul.json.token;
[implementation]import soul.json.token.parser;

parser JsonParser
{
    lexer soul::json::lexer::JsonLexer<char32_t>;
    main;

    Value : util::JsonValue*
        ::= STRING{ auto token = lexer.GetToken(pos); return new util::JsonString(soul::json::token::parser::ParseStringLiteral(lexer.FileName(), token)); }
        |   NUMBER{ auto token = lexer.GetToken(pos); return new util::JsonNumber(soul::json::token::parser::ParseNumber(lexer.FileName(), token)); }
        |   Object:o{ return o; }
        |   Array:a{ return a; }
        |   TRUE{ return new util::JsonBool(true); }
        |   FALSE{ return new util::JsonBool(false); }
        |   NULL{ return new util::JsonNull(); }
        ;

    Object(var std::unique_ptr<util::JsonObject> o) : util::JsonObject*
        ::= LBRACE{ o.reset(new util::JsonObject()); } 
            (
                Field(o.get()):field % COMMA
            )? 
            RBRACE{ return o.release(); }
        ;
        
    Field(util::JsonObject* o, var std::u32string n)
        ::= STRING{ auto token = lexer.GetToken(pos); n = soul::json::token::parser::ParseStringLiteral(lexer.FileName(), token); } 
            COLON 
            Value:v{ std::unique_ptr<util::JsonValue> item = std::unique_ptr<util::JsonValue>(v); o->AddField(n, std::move(item)); }
        ;
        
    Array(var std::unique_ptr<util::JsonArray> a) : util::JsonArray*
        ::= LBRACKET{ a.reset(new util::JsonArray()); } 
            (
                Value:v{ std::unique_ptr<util::JsonValue> item = std::unique_ptr<util::JsonValue>(v); a->AddItem(std::move(item)); } % COMMA
            )? 
            RBRACKET{ return a.release(); }
        ;
}
