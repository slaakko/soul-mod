// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

export module soul.cpp20.parser.translation.unit;

[interface]import soul.cpp20.symbols.context;
[interface]import soul.cpp20.ast;
[implementation]import soul.cpp20.token;
[implementation]import soul.cpp20.lexer;
[implementation]import soul.cpp20.parser.declaration;
[implementation]import soul.cpp20.parser.modules;

parser TranslationUnitParser 
{
    lexer soul::cpp20::lexer::Cpp20Lexer<char32_t>;
    main;

    using ModuleParser.GlobalModuleFragment;
    using ModuleParser.ModuleDeclaration;
    using ModuleParser.PrivateModuleFragment;
    using DeclarationParser.DeclarationSeq;
    
    TranslationUnit(soul::cpp20::symbols::Context* context) : soul::cpp20::ast::Node*
        ::= 
        (   ModuleUnit(context):moduleUnit{ return new soul::cpp20::ast::TranslationUnitNode(lexer.GetSourcePos(pos), moduleUnit); }
        |   DeclarationSeq(context):declarations{ return new soul::cpp20::ast::TranslationUnitNode(lexer.GetSourcePos(pos), declarations); }
        |   empty{ return new soul::cpp20::ast::TranslationUnitNode(lexer.GetSourcePos(pos), nullptr); }
        )
        ;

    ModuleUnit(soul::cpp20::symbols::Context* context, var soul::ast::SourcePos sourcePos) : soul::cpp20::ast::Node*
        ::= 
        (
            (
                GlobalModuleFragment(context):globalModuleFragment{ sourcePos = lexer.GetSourcePos(pos); }
            )? 
            ModuleDeclaration(context):moduleDeclaration{ if (!sourcePos.IsValid()) sourcePos = lexer.GetSourcePos(pos); } 
            DeclarationSeq(context):declarations? 
            PrivateModuleFragment(context):privateModuleFragment?
        )
        {
            return new soul::cpp20::ast::ModuleUnitNode(sourcePos, globalModuleFragment, moduleDeclaration, declarations, privateModuleFragment);
        }
        ;
}
