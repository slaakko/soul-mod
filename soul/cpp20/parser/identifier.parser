// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

export module soul.cpp20.parser.identifier;

[interface]import soul.cpp20.symbols.context;
[implementation]import soul.cpp20.ast;
[implementation]import soul.cpp20.symbols;
[implementation]import soul.cpp20.token;
[implementation]import soul.cpp20.lexer;
[implementation]import soul.cpp20.parser.function;
[implementation]import soul.cpp20.parser.guard;
[implementation]import soul.cpp20.parser.literal;
[implementation]import soul.cpp20.parser.templates;
[implementation]import soul.cpp20.parser.punctuation;
[implementation]import soul.cpp20.parser.token;

parser IdentifierParser
{
    lexer soul::cpp20::lexer::Cpp20Lexer<char32_t>;

    using FunctionParser.OperatorFunctionId;
    using FunctionParser.ConversionFunctionId;
    using FunctionParser.DestructorId;
    using GuardParser.AssumeTypeGuard;
    using LiteralParser.LiteralOperatorId;
    using PunctuationParser.Comma;
    using TemplateParser.TemplateId;
    using TemplateParser.SimpleTemplateId;

    Identifier(soul::cpp20::symbols::Context* context) : soul::cpp20::ast::Node*
        ::= ID{ return soul::cpp20::parser::token::ParseIdentifier(lexer.GetSourcePos(pos), lexer.FileName(), lexer.GetToken(pos)); }
        ;

    UnqualifiedId(soul::cpp20::symbols::Context* context) : soul::cpp20::ast::Node*
        ::= TemplateId(context):templateId{ return templateId; }
        |   Identifier(context):identifier{ return identifier; }
        |   OperatorFunctionId(context):operatorFnId{ return operatorFnId; }
        |   ConversionFunctionId(context):conversionFnId{ return conversionFnId; }
        |   LiteralOperatorId(context):literalOperatorId{ return literalOperatorId; }
        |   DestructorId(context):destructorId{ return destructorId; }
        ;

    QualifiedId(soul::cpp20::symbols::Context* context, var soul::ast::SourcePos sourcePos, var soul::ast::SourcePos templatePos) : soul::cpp20::ast::Node*
        ::= 
        (
            NestedNameSpecifier(context):nns{ sourcePos = lexer.GetSourcePos(pos); } 
            (
                Template:tmp{ templatePos = lexer.GetSourcePos(pos); } 
                UnqualifiedId(context):unqualifiedId
                {
                    return new soul::cpp20::ast::QualifiedIdNode(sourcePos, nns, new soul::cpp20::ast::PrefixNode(templatePos, tmp, unqualifiedId));
                }
            |   UnqualifiedId(context):unqualifiedId
                {
                    return new soul::cpp20::ast::QualifiedIdNode(sourcePos, nns, unqualifiedId);
                }
            )
        )
        ;

    Template : soul::cpp20::ast::Node*
        ::= TEMPLATE{ return new soul::cpp20::ast::TemplateNode(lexer.GetSourcePos(pos)); }
        ;

    NestedNameSpecifier(soul::cpp20::symbols::Context* context, var std::unique_ptr<soul::cpp20::ast::NestedNameSpecifierNode> nnsNode, 
        var std::unique_ptr<soul::cpp20::ast::Node> idNode) : soul::cpp20::ast::Node*
        ::= 
        (   empty{ nnsNode.reset(new soul::cpp20::ast::NestedNameSpecifierNode(lexer.GetSourcePos(pos))); }
            (COLON_COLON{ nnsNode->AddNode(new soul::cpp20::ast::ColonColonNode(lexer.GetSourcePos(pos))); })?
            (   (TEMPLATE{ nnsNode->AddNode(new soul::cpp20::ast::TemplateNode(lexer.GetSourcePos(pos))); })?
                SimpleTemplateId(context):simpleTemplateId{ idNode.reset(simpleTemplateId); }
                COLON_COLON{ nnsNode->AddNode(idNode.release()); nnsNode->AddNode(new soul::cpp20::ast::ColonColonNode(lexer.GetSourcePos(pos))); }
            |   ID{ idNode.reset(soul::cpp20::parser::token::ParseIdentifier(lexer.GetSourcePos(pos), lexer.FileName(), lexer.GetToken(pos))); } 
                COLON_COLON{ nnsNode->AddNode(idNode.release()); nnsNode->AddNode(new soul::cpp20::ast::ColonColonNode(lexer.GetSourcePos(pos))); }
            )*
        )
        {
            if (nnsNode->Nodes().IsEmpty())
            {
                pass = false;
            }
            else
            {
                nnsNode->SetSourcePos(nnsNode->Nodes()[0]->GetSourcePos());
                return nnsNode.release();
            }
        }
        ;

    IdentifierList(soul::cpp20::symbols::Context* context, var std::unique_ptr<soul::cpp20::ast::Node> identifierListNode) : soul::cpp20::ast::Node*
        ::= 
        (
            Identifier(context):first{ identifierListNode.reset(new soul::cpp20::ast::IdentifierListNode(lexer.GetSourcePos(pos))); identifierListNode->AddNode(first); } 
            (   Comma:comma{ identifierListNode->AddNode(comma); }
                Identifier(context):next{ identifierListNode->AddNode(next); }
            )*
        )
        {
            return identifierListNode.release();
        }
        ;

    TypeIdentifier(soul::cpp20::symbols::Context* context) : soul::cpp20::ast::Node*
        ::= AssumeTypeGuard(context):assumeTypeGuard TypeIdentifierUnchecked(context):typeName{ return typeName; }
        |   TypeIdentifierChecked(context):typeIdentifier{ return typeIdentifier; }
        ;

    TypeIdentifierUnchecked(soul::cpp20::symbols::Context* context, var std::unique_ptr<Node> identifier) : soul::cpp20::ast::Node*
        ::= Identifier(context):id
            { 
                identifier.reset(id);
                //context->GetSymbolTable()->MapNode(identifier.get(), context->GetSymbolTable()->MakeGenericTypeSymbol(), soul::cpp20::symbols::MapKind::nodeToSymbol);
                return identifier.release(); 
            }
        ;

    TypeIdentifierChecked(soul::cpp20::symbols::Context* context) : soul::cpp20::ast::Node*
        ::= ID
            { 
                std::unique_ptr<soul::cpp20::ast::IdentifierNode> identifier(soul::cpp20::parser::token::ParseIdentifier(lexer.GetSourcePos(pos), lexer.FileName(), lexer.GetToken(pos)));
                soul::cpp20::symbols::Symbol* symbol = context->GetSymbolTable()->Lookup(
                    identifier->Str(), 
                    soul::cpp20::symbols::SymbolGroupKind::typeSymbolGroup, 
                    lexer.GetSourcePos(pos), 
                    context);
                if (symbol && symbol->IsTypeSymbol())
                {
                    context->GetSymbolTable()->MapNode(identifier.get(), symbol);
                    return identifier.release();
                }
                else
                {
                    pass = false;
                }
            }
        ;

    Unnamed : soul::cpp20::ast::Node*
        ::= empty{ return new soul::cpp20::ast::UnnamedNode(lexer.GetSourcePos(pos)); }
        ;

}
