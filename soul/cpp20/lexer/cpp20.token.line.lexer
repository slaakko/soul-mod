// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

export module soul.cpp20.token.line.lexer;

import soul.cpp20.token;
import soul.cpp20.keyword;
import soul.cpp20.expr;

lexer Cpp20TokenLineLexer
{
    rules
    {
        "{ws}+" { return WS; }
        "{newline}" { return NEWLINE; }
        "{pp_line}" { return PP_LINE; }
        "{line_comment}" { return LINE_COMMENT; }
        "{block_comment_start}" { return BLOCK_COMMENT_START; }
        "{block_comment_end}" { return BLOCK_COMMENT_END; }
        "{id}" { int64_t kw = lexer.GetKeywordToken(lexer.CurrentToken().match); if (kw == INVALID_TOKEN) return ID; else return KEYWORD; }
        "{integer_literal}" { return INTEGER_LITERAL; }
        "{floating_literal}" { return FLOATING_LITERAL; }
        "{character_literal}" { return CHARACTER_LITERAL; }
        "{begin_raw_string_literal}" { return BEGIN_RAW_STRING_LITERAL; }
        "{string_literal}" { return STRING_LITERAL; }
        "::" { return OTHER; }
        "," { return OTHER; }
        "=" { return OTHER; }
        "\*=" { return OTHER; }
        "/=" { return OTHER; }
        "%=" { return OTHER; }
        "\+=" { return OTHER; }
        "-=" { return OTHER; }
        ">>=" { return OTHER; }
        "<<=" { return OTHER; }
        "&=" { return OTHER; }
        "^=" { return OTHER; }
        "\|=" { return OTHER; }
        "\?" { return OTHER; }
        ":" { return OTHER; }
        "\|\|" { return OTHER; }
        "&&" { return OTHER; }
        "\|" { return OTHER; }
        "^" { return OTHER; }
        "&" { return OTHER; }
        "==" { return OTHER; }
        "!=" { return OTHER; }
        "<=" { return OTHER; }
        ">=" { return OTHER; }
        "<=>" { return OTHER; }
        "<" { return OTHER; }
        ">" { return OTHER; }
        "<<" { return OTHER; }
        ">>" $(1) { return OTHER; }
        "\+" { return OTHER; }
        "-" { return OTHER; }
        "\*" { return OTHER; }
        "/" { return OTHER; }
        "%" { return OTHER; }
        "\.\*" { return OTHER; }
        "->\*" { return OTHER; }
        "\(" { return OTHER; }
        "\)" { return OTHER; }
        "\+\+" { return OTHER; }
        "--" { return OTHER; }
        "!" { return OTHER; }
        "~" { return OTHER; }
        "\[" { return OTHER; }
        "\]" { return OTHER; }
        "\." { return OTHER; }
        "->" { return OTHER; }
        ";" { return OTHER; }
        "\.\.\." { return OTHER; }
        "\{" { return OTHER; }
        "\}" { return OTHER; }
    }

    variables
    {
        int langleCount;
    }

    actions
    {
        $(1) = { if (vars->langleCount > 0) return INVALID_TOKEN; }
    }
}
